<?php
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface InventarioIf {
  /**
   * @param \Busqueda $busqueda
   * @param \Item $item
   * @return \Item
   */
  public function getItem(\Busqueda $busqueda, \Item $item);
  /**
   * @param \Busqueda $busqueda
   * @param \Item $item
   * @return \Item[]
   */
  public function getAllItem(\Busqueda $busqueda, \Item $item);
  /**
   * @param \Busqueda $busqueda
   * @param \Item $item
   * @return string
   */
  public function updateEstadoItem(\Busqueda $busqueda, \Item $item);
  /**
   * @param \Busqueda $busqueda
   * @param \Item $item
   * @return string
   */
  public function updateItem(\Busqueda $busqueda, \Item $item);
  /**
   * @param \Busqueda $busqueda
   * @param \Item $item
   * @return string
   */
  public function insertItem(\Busqueda $busqueda, \Item $item);
  /**
   * @param \Busqueda $busqueda
   * @param \Item $item
   * @return string
   */
  public function deleteItem(\Busqueda $busqueda, \Item $item);
  /**
   * @param \Busqueda $busqueda
   * @param \Grupo $grupo
   * @return \Grupo
   */
  public function getGrupo(\Busqueda $busqueda, \Grupo $grupo);
  /**
   * @param \Busqueda $busqueda
   * @param \Grupo $grupo
   * @return \Grupo[]
   */
  public function getAllGrupo(\Busqueda $busqueda, \Grupo $grupo);
  /**
   * @param \Busqueda $busqueda
   * @param \Grupo $grupo
   * @return string
   */
  public function updateEstadoGrupo(\Busqueda $busqueda, \Grupo $grupo);
  /**
   * @param \Busqueda $busqueda
   * @param \Grupo $grupo
   * @return string
   */
  public function updateGrupo(\Busqueda $busqueda, \Grupo $grupo);
  /**
   * @param \Busqueda $busqueda
   * @param \Grupo $grupo
   * @return string
   */
  public function insertGrupo(\Busqueda $busqueda, \Grupo $grupo);
  /**
   * @param \Busqueda $busqueda
   * @param \Grupo $grupo
   * @return string
   */
  public function deleteGrupo(\Busqueda $busqueda, \Grupo $grupo);
  /**
   * @param \Busqueda $busqueda
   * @param \Compuesto $compuesto
   * @return \Compuesto
   */
  public function getCompuesto(\Busqueda $busqueda, \Compuesto $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \Compuesto $compuesto
   * @return \Compuesto[]
   */
  public function getAllCompuesto(\Busqueda $busqueda, \Compuesto $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \Compuesto $compuesto
   * @return string
   */
  public function updateEstadoCompuesto(\Busqueda $busqueda, \Compuesto $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \Compuesto $compuesto
   * @return string
   */
  public function updateCompuesto(\Busqueda $busqueda, \Compuesto $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \Compuesto $compuesto
   * @return string
   */
  public function insertCompuesto(\Busqueda $busqueda, \Compuesto $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \Compuesto $compuesto
   * @return string
   */
  public function deleteCompuesto(\Busqueda $busqueda, \Compuesto $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \CompuestoItem $compuesto
   * @return \CompuestoItem
   */
  public function getCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \CompuestoItem $compuesto
   * @return \CompuestoItem[]
   */
  public function getAllCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \CompuestoItem $compuesto
   * @return string
   */
  public function updateEstadoCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \CompuestoItem $compuesto
   * @return string
   */
  public function updateCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \CompuestoItem $compuesto
   * @return string
   */
  public function insertCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \CompuestoItem $compuesto
   * @return string
   */
  public function deleteCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \Promocion $promo
   * @return \Promocion
   */
  public function getPromocion(\Busqueda $busqueda, \Promocion $promo);
  /**
   * @param \Busqueda $busqueda
   * @param \Promocion $promo
   * @return \Promocion[]
   */
  public function getAllPromocion(\Busqueda $busqueda, \Promocion $promo);
  /**
   * @param \Busqueda $busqueda
   * @param \Promocion $promo
   * @return string
   */
  public function updateEstadoPromocion(\Busqueda $busqueda, \Promocion $promo);
  /**
   * @param \Busqueda $busqueda
   * @param \Promocion $promo
   * @return string
   */
  public function updatePromocion(\Busqueda $busqueda, \Promocion $promo);
  /**
   * @param \Busqueda $busqueda
   * @param \Promocion $promo
   * @return string
   */
  public function insertPromocion(\Busqueda $busqueda, \Promocion $promo);
  /**
   * @param \Busqueda $busqueda
   * @param \Promocion $promo
   * @return string
   */
  public function deletePromocion(\Busqueda $busqueda, \Promocion $promo);
  /**
   * @param \Busqueda $busqueda
   * @param \Ingreso $ingreso
   * @return \Ingreso
   */
  public function getIngreso(\Busqueda $busqueda, \Ingreso $ingreso);
  /**
   * @param \Busqueda $busqueda
   * @param \Ingreso $ingreso
   * @return \Ingreso[]
   */
  public function getAllIngreso(\Busqueda $busqueda, \Ingreso $ingreso);
  /**
   * @param \Busqueda $busqueda
   * @param \Ingreso $ingreso
   * @return string
   */
  public function insertIngreso(\Busqueda $busqueda, \Ingreso $ingreso);
  /**
   * @param \Busqueda $busqueda
   * @param \Ingreso $ingreso
   * @return string
   */
  public function deleteIngreso(\Busqueda $busqueda, \Ingreso $ingreso);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompra $orden
   * @return \OrdenCompra
   */
  public function getOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompraItem $orden
   * @return \OrdenCompraItem
   */
  public function getOrdenCompraItem(\Busqueda $busqueda, \OrdenCompraItem $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompra $orden
   * @return \OrdenCompra[]
   */
  public function getAllOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompra $orden
   * @return string
   */
  public function insertOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompra $orden
   * @return string
   */
  public function deleteOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompra $orden
   * @return string
   */
  public function updateOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompra $orden
   * @return string
   */
  public function updateEstadoOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompraItem $orden
   * @return string
   */
  public function deleteOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompraItem $orden
   * @return string
   */
  public function insertOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompraItem $orden
   * @return string
   */
  public function updateOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \Proveedor $proveedor
   * @return \Proveedor
   */
  public function getProveedor(\Busqueda $busqueda, \Proveedor $proveedor);
  /**
   * @param \Busqueda $busqueda
   * @param \Proveedor $proveedor
   * @return \Proveedor[]
   */
  public function getAllProveedor(\Busqueda $busqueda, \Proveedor $proveedor);
  /**
   * @param \Busqueda $busqueda
   * @param \Proveedor $proveedor
   * @return string
   */
  public function updateEstadoProveedor(\Busqueda $busqueda, \Proveedor $proveedor);
  /**
   * @param \Busqueda $busqueda
   * @param \Proveedor $proveedor
   * @return string
   */
  public function updateProveedor(\Busqueda $busqueda, \Proveedor $proveedor);
  /**
   * @param \Busqueda $busqueda
   * @param \Proveedor $proveedor
   * @return string
   */
  public function insertProveedor(\Busqueda $busqueda, \Proveedor $proveedor);
  /**
   * @param \Busqueda $busqueda
   * @param \Proveedor $proveedor
   * @return string
   */
  public function deleteProveedor(\Busqueda $busqueda, \Proveedor $proveedor);
}


class InventarioClient implements \InventarioIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getItem(\Busqueda $busqueda, \Item $item)
  {
    $this->send_getItem($busqueda, $item);
    return $this->recv_getItem();
  }

  public function send_getItem(\Busqueda $busqueda, \Item $item)
  {
    $args = new \Inventario_getItem_args();
    $args->busqueda = $busqueda;
    $args->item = $item;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItem failed: unknown result");
  }

  public function getAllItem(\Busqueda $busqueda, \Item $item)
  {
    $this->send_getAllItem($busqueda, $item);
    return $this->recv_getAllItem();
  }

  public function send_getAllItem(\Busqueda $busqueda, \Item $item)
  {
    $args = new \Inventario_getAllItem_args();
    $args->busqueda = $busqueda;
    $args->item = $item;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllItem failed: unknown result");
  }

  public function updateEstadoItem(\Busqueda $busqueda, \Item $item)
  {
    $this->send_updateEstadoItem($busqueda, $item);
    return $this->recv_updateEstadoItem();
  }

  public function send_updateEstadoItem(\Busqueda $busqueda, \Item $item)
  {
    $args = new \Inventario_updateEstadoItem_args();
    $args->busqueda = $busqueda;
    $args->item = $item;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoItem failed: unknown result");
  }

  public function updateItem(\Busqueda $busqueda, \Item $item)
  {
    $this->send_updateItem($busqueda, $item);
    return $this->recv_updateItem();
  }

  public function send_updateItem(\Busqueda $busqueda, \Item $item)
  {
    $args = new \Inventario_updateItem_args();
    $args->busqueda = $busqueda;
    $args->item = $item;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateItem failed: unknown result");
  }

  public function insertItem(\Busqueda $busqueda, \Item $item)
  {
    $this->send_insertItem($busqueda, $item);
    return $this->recv_insertItem();
  }

  public function send_insertItem(\Busqueda $busqueda, \Item $item)
  {
    $args = new \Inventario_insertItem_args();
    $args->busqueda = $busqueda;
    $args->item = $item;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertItem failed: unknown result");
  }

  public function deleteItem(\Busqueda $busqueda, \Item $item)
  {
    $this->send_deleteItem($busqueda, $item);
    return $this->recv_deleteItem();
  }

  public function send_deleteItem(\Busqueda $busqueda, \Item $item)
  {
    $args = new \Inventario_deleteItem_args();
    $args->busqueda = $busqueda;
    $args->item = $item;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteItem failed: unknown result");
  }

  public function getGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $this->send_getGrupo($busqueda, $grupo);
    return $this->recv_getGrupo();
  }

  public function send_getGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $args = new \Inventario_getGrupo_args();
    $args->busqueda = $busqueda;
    $args->grupo = $grupo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGrupo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGrupo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGrupo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getGrupo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getGrupo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGrupo failed: unknown result");
  }

  public function getAllGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $this->send_getAllGrupo($busqueda, $grupo);
    return $this->recv_getAllGrupo();
  }

  public function send_getAllGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $args = new \Inventario_getAllGrupo_args();
    $args->busqueda = $busqueda;
    $args->grupo = $grupo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllGrupo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllGrupo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllGrupo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllGrupo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllGrupo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllGrupo failed: unknown result");
  }

  public function updateEstadoGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $this->send_updateEstadoGrupo($busqueda, $grupo);
    return $this->recv_updateEstadoGrupo();
  }

  public function send_updateEstadoGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $args = new \Inventario_updateEstadoGrupo_args();
    $args->busqueda = $busqueda;
    $args->grupo = $grupo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoGrupo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoGrupo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoGrupo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoGrupo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoGrupo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoGrupo failed: unknown result");
  }

  public function updateGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $this->send_updateGrupo($busqueda, $grupo);
    return $this->recv_updateGrupo();
  }

  public function send_updateGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $args = new \Inventario_updateGrupo_args();
    $args->busqueda = $busqueda;
    $args->grupo = $grupo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateGrupo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateGrupo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateGrupo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateGrupo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateGrupo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateGrupo failed: unknown result");
  }

  public function insertGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $this->send_insertGrupo($busqueda, $grupo);
    return $this->recv_insertGrupo();
  }

  public function send_insertGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $args = new \Inventario_insertGrupo_args();
    $args->busqueda = $busqueda;
    $args->grupo = $grupo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertGrupo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertGrupo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertGrupo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertGrupo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertGrupo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertGrupo failed: unknown result");
  }

  public function deleteGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $this->send_deleteGrupo($busqueda, $grupo);
    return $this->recv_deleteGrupo();
  }

  public function send_deleteGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $args = new \Inventario_deleteGrupo_args();
    $args->busqueda = $busqueda;
    $args->grupo = $grupo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteGrupo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteGrupo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteGrupo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteGrupo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteGrupo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteGrupo failed: unknown result");
  }

  public function getCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $this->send_getCompuesto($busqueda, $compuesto);
    return $this->recv_getCompuesto();
  }

  public function send_getCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $args = new \Inventario_getCompuesto_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCompuesto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCompuesto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCompuesto()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getCompuesto_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getCompuesto_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCompuesto failed: unknown result");
  }

  public function getAllCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $this->send_getAllCompuesto($busqueda, $compuesto);
    return $this->recv_getAllCompuesto();
  }

  public function send_getAllCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $args = new \Inventario_getAllCompuesto_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllCompuesto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllCompuesto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllCompuesto()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllCompuesto_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllCompuesto_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllCompuesto failed: unknown result");
  }

  public function updateEstadoCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $this->send_updateEstadoCompuesto($busqueda, $compuesto);
    return $this->recv_updateEstadoCompuesto();
  }

  public function send_updateEstadoCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $args = new \Inventario_updateEstadoCompuesto_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoCompuesto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoCompuesto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoCompuesto()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoCompuesto_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoCompuesto_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoCompuesto failed: unknown result");
  }

  public function updateCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $this->send_updateCompuesto($busqueda, $compuesto);
    return $this->recv_updateCompuesto();
  }

  public function send_updateCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $args = new \Inventario_updateCompuesto_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateCompuesto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateCompuesto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateCompuesto()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateCompuesto_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateCompuesto_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateCompuesto failed: unknown result");
  }

  public function insertCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $this->send_insertCompuesto($busqueda, $compuesto);
    return $this->recv_insertCompuesto();
  }

  public function send_insertCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $args = new \Inventario_insertCompuesto_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertCompuesto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertCompuesto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertCompuesto()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertCompuesto_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertCompuesto_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertCompuesto failed: unknown result");
  }

  public function deleteCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $this->send_deleteCompuesto($busqueda, $compuesto);
    return $this->recv_deleteCompuesto();
  }

  public function send_deleteCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $args = new \Inventario_deleteCompuesto_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteCompuesto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteCompuesto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteCompuesto()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteCompuesto_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteCompuesto_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteCompuesto failed: unknown result");
  }

  public function getCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $this->send_getCompuestoItem($busqueda, $compuesto);
    return $this->recv_getCompuestoItem();
  }

  public function send_getCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $args = new \Inventario_getCompuestoItem_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCompuestoItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCompuestoItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCompuestoItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getCompuestoItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getCompuestoItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCompuestoItem failed: unknown result");
  }

  public function getAllCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $this->send_getAllCompuestoItem($busqueda, $compuesto);
    return $this->recv_getAllCompuestoItem();
  }

  public function send_getAllCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $args = new \Inventario_getAllCompuestoItem_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllCompuestoItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllCompuestoItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllCompuestoItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllCompuestoItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllCompuestoItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllCompuestoItem failed: unknown result");
  }

  public function updateEstadoCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $this->send_updateEstadoCompuestoItem($busqueda, $compuesto);
    return $this->recv_updateEstadoCompuestoItem();
  }

  public function send_updateEstadoCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $args = new \Inventario_updateEstadoCompuestoItem_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoCompuestoItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoCompuestoItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoCompuestoItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoCompuestoItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoCompuestoItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoCompuestoItem failed: unknown result");
  }

  public function updateCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $this->send_updateCompuestoItem($busqueda, $compuesto);
    return $this->recv_updateCompuestoItem();
  }

  public function send_updateCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $args = new \Inventario_updateCompuestoItem_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateCompuestoItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateCompuestoItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateCompuestoItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateCompuestoItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateCompuestoItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateCompuestoItem failed: unknown result");
  }

  public function insertCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $this->send_insertCompuestoItem($busqueda, $compuesto);
    return $this->recv_insertCompuestoItem();
  }

  public function send_insertCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $args = new \Inventario_insertCompuestoItem_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertCompuestoItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertCompuestoItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertCompuestoItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertCompuestoItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertCompuestoItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertCompuestoItem failed: unknown result");
  }

  public function deleteCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $this->send_deleteCompuestoItem($busqueda, $compuesto);
    return $this->recv_deleteCompuestoItem();
  }

  public function send_deleteCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $args = new \Inventario_deleteCompuestoItem_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteCompuestoItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteCompuestoItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteCompuestoItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteCompuestoItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteCompuestoItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteCompuestoItem failed: unknown result");
  }

  public function getPromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $this->send_getPromocion($busqueda, $promo);
    return $this->recv_getPromocion();
  }

  public function send_getPromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $args = new \Inventario_getPromocion_args();
    $args->busqueda = $busqueda;
    $args->promo = $promo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getPromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getPromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPromocion failed: unknown result");
  }

  public function getAllPromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $this->send_getAllPromocion($busqueda, $promo);
    return $this->recv_getAllPromocion();
  }

  public function send_getAllPromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $args = new \Inventario_getAllPromocion_args();
    $args->busqueda = $busqueda;
    $args->promo = $promo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllPromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllPromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllPromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllPromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllPromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllPromocion failed: unknown result");
  }

  public function updateEstadoPromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $this->send_updateEstadoPromocion($busqueda, $promo);
    return $this->recv_updateEstadoPromocion();
  }

  public function send_updateEstadoPromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $args = new \Inventario_updateEstadoPromocion_args();
    $args->busqueda = $busqueda;
    $args->promo = $promo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoPromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoPromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoPromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoPromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoPromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoPromocion failed: unknown result");
  }

  public function updatePromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $this->send_updatePromocion($busqueda, $promo);
    return $this->recv_updatePromocion();
  }

  public function send_updatePromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $args = new \Inventario_updatePromocion_args();
    $args->busqueda = $busqueda;
    $args->promo = $promo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updatePromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updatePromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePromocion failed: unknown result");
  }

  public function insertPromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $this->send_insertPromocion($busqueda, $promo);
    return $this->recv_insertPromocion();
  }

  public function send_insertPromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $args = new \Inventario_insertPromocion_args();
    $args->busqueda = $busqueda;
    $args->promo = $promo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertPromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertPromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertPromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertPromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertPromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertPromocion failed: unknown result");
  }

  public function deletePromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $this->send_deletePromocion($busqueda, $promo);
    return $this->recv_deletePromocion();
  }

  public function send_deletePromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $args = new \Inventario_deletePromocion_args();
    $args->busqueda = $busqueda;
    $args->promo = $promo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deletePromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deletePromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deletePromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deletePromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deletePromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deletePromocion failed: unknown result");
  }

  public function getIngreso(\Busqueda $busqueda, \Ingreso $ingreso)
  {
    $this->send_getIngreso($busqueda, $ingreso);
    return $this->recv_getIngreso();
  }

  public function send_getIngreso(\Busqueda $busqueda, \Ingreso $ingreso)
  {
    $args = new \Inventario_getIngreso_args();
    $args->busqueda = $busqueda;
    $args->ingreso = $ingreso;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getIngreso', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getIngreso', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getIngreso()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getIngreso_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getIngreso_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getIngreso failed: unknown result");
  }

  public function getAllIngreso(\Busqueda $busqueda, \Ingreso $ingreso)
  {
    $this->send_getAllIngreso($busqueda, $ingreso);
    return $this->recv_getAllIngreso();
  }

  public function send_getAllIngreso(\Busqueda $busqueda, \Ingreso $ingreso)
  {
    $args = new \Inventario_getAllIngreso_args();
    $args->busqueda = $busqueda;
    $args->ingreso = $ingreso;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllIngreso', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllIngreso', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllIngreso()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllIngreso_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllIngreso_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllIngreso failed: unknown result");
  }

  public function insertIngreso(\Busqueda $busqueda, \Ingreso $ingreso)
  {
    $this->send_insertIngreso($busqueda, $ingreso);
    return $this->recv_insertIngreso();
  }

  public function send_insertIngreso(\Busqueda $busqueda, \Ingreso $ingreso)
  {
    $args = new \Inventario_insertIngreso_args();
    $args->busqueda = $busqueda;
    $args->ingreso = $ingreso;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertIngreso', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertIngreso', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertIngreso()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertIngreso_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertIngreso_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertIngreso failed: unknown result");
  }

  public function deleteIngreso(\Busqueda $busqueda, \Ingreso $ingreso)
  {
    $this->send_deleteIngreso($busqueda, $ingreso);
    return $this->recv_deleteIngreso();
  }

  public function send_deleteIngreso(\Busqueda $busqueda, \Ingreso $ingreso)
  {
    $args = new \Inventario_deleteIngreso_args();
    $args->busqueda = $busqueda;
    $args->ingreso = $ingreso;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteIngreso', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteIngreso', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteIngreso()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteIngreso_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteIngreso_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteIngreso failed: unknown result");
  }

  public function getOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $this->send_getOrdenCompra($busqueda, $orden);
    return $this->recv_getOrdenCompra();
  }

  public function send_getOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $args = new \Inventario_getOrdenCompra_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrdenCompra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrdenCompra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrdenCompra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getOrdenCompra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getOrdenCompra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrdenCompra failed: unknown result");
  }

  public function getOrdenCompraItem(\Busqueda $busqueda, \OrdenCompraItem $orden)
  {
    $this->send_getOrdenCompraItem($busqueda, $orden);
    return $this->recv_getOrdenCompraItem();
  }

  public function send_getOrdenCompraItem(\Busqueda $busqueda, \OrdenCompraItem $orden)
  {
    $args = new \Inventario_getOrdenCompraItem_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrdenCompraItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrdenCompraItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrdenCompraItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getOrdenCompraItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getOrdenCompraItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrdenCompraItem failed: unknown result");
  }

  public function getAllOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $this->send_getAllOrdenCompra($busqueda, $orden);
    return $this->recv_getAllOrdenCompra();
  }

  public function send_getAllOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $args = new \Inventario_getAllOrdenCompra_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllOrdenCompra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllOrdenCompra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllOrdenCompra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllOrdenCompra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllOrdenCompra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllOrdenCompra failed: unknown result");
  }

  public function insertOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $this->send_insertOrdenCompra($busqueda, $orden);
    return $this->recv_insertOrdenCompra();
  }

  public function send_insertOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $args = new \Inventario_insertOrdenCompra_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertOrdenCompra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertOrdenCompra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertOrdenCompra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertOrdenCompra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertOrdenCompra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertOrdenCompra failed: unknown result");
  }

  public function deleteOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $this->send_deleteOrdenCompra($busqueda, $orden);
    return $this->recv_deleteOrdenCompra();
  }

  public function send_deleteOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $args = new \Inventario_deleteOrdenCompra_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteOrdenCompra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteOrdenCompra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteOrdenCompra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteOrdenCompra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteOrdenCompra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteOrdenCompra failed: unknown result");
  }

  public function updateOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $this->send_updateOrdenCompra($busqueda, $orden);
    return $this->recv_updateOrdenCompra();
  }

  public function send_updateOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $args = new \Inventario_updateOrdenCompra_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateOrdenCompra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateOrdenCompra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateOrdenCompra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateOrdenCompra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateOrdenCompra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateOrdenCompra failed: unknown result");
  }

  public function updateEstadoOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $this->send_updateEstadoOrdenCompra($busqueda, $orden);
    return $this->recv_updateEstadoOrdenCompra();
  }

  public function send_updateEstadoOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $args = new \Inventario_updateEstadoOrdenCompra_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoOrdenCompra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoOrdenCompra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoOrdenCompra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoOrdenCompra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoOrdenCompra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoOrdenCompra failed: unknown result");
  }

  public function deleteOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden)
  {
    $this->send_deleteOrdenCompra_item($busqueda, $orden);
    return $this->recv_deleteOrdenCompra_item();
  }

  public function send_deleteOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden)
  {
    $args = new \Inventario_deleteOrdenCompra_item_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteOrdenCompra_item', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteOrdenCompra_item', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteOrdenCompra_item()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteOrdenCompra_item_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteOrdenCompra_item_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteOrdenCompra_item failed: unknown result");
  }

  public function insertOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden)
  {
    $this->send_insertOrdenCompra_item($busqueda, $orden);
    return $this->recv_insertOrdenCompra_item();
  }

  public function send_insertOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden)
  {
    $args = new \Inventario_insertOrdenCompra_item_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertOrdenCompra_item', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertOrdenCompra_item', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertOrdenCompra_item()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertOrdenCompra_item_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertOrdenCompra_item_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertOrdenCompra_item failed: unknown result");
  }

  public function updateOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden)
  {
    $this->send_updateOrdenCompra_item($busqueda, $orden);
    return $this->recv_updateOrdenCompra_item();
  }

  public function send_updateOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden)
  {
    $args = new \Inventario_updateOrdenCompra_item_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateOrdenCompra_item', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateOrdenCompra_item', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateOrdenCompra_item()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateOrdenCompra_item_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateOrdenCompra_item_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateOrdenCompra_item failed: unknown result");
  }

  public function getProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $this->send_getProveedor($busqueda, $proveedor);
    return $this->recv_getProveedor();
  }

  public function send_getProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $args = new \Inventario_getProveedor_args();
    $args->busqueda = $busqueda;
    $args->proveedor = $proveedor;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getProveedor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getProveedor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getProveedor()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getProveedor_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getProveedor_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getProveedor failed: unknown result");
  }

  public function getAllProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $this->send_getAllProveedor($busqueda, $proveedor);
    return $this->recv_getAllProveedor();
  }

  public function send_getAllProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $args = new \Inventario_getAllProveedor_args();
    $args->busqueda = $busqueda;
    $args->proveedor = $proveedor;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllProveedor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllProveedor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllProveedor()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllProveedor_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllProveedor_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllProveedor failed: unknown result");
  }

  public function updateEstadoProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $this->send_updateEstadoProveedor($busqueda, $proveedor);
    return $this->recv_updateEstadoProveedor();
  }

  public function send_updateEstadoProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $args = new \Inventario_updateEstadoProveedor_args();
    $args->busqueda = $busqueda;
    $args->proveedor = $proveedor;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoProveedor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoProveedor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoProveedor()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoProveedor_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoProveedor_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoProveedor failed: unknown result");
  }

  public function updateProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $this->send_updateProveedor($busqueda, $proveedor);
    return $this->recv_updateProveedor();
  }

  public function send_updateProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $args = new \Inventario_updateProveedor_args();
    $args->busqueda = $busqueda;
    $args->proveedor = $proveedor;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateProveedor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateProveedor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateProveedor()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateProveedor_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateProveedor_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateProveedor failed: unknown result");
  }

  public function insertProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $this->send_insertProveedor($busqueda, $proveedor);
    return $this->recv_insertProveedor();
  }

  public function send_insertProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $args = new \Inventario_insertProveedor_args();
    $args->busqueda = $busqueda;
    $args->proveedor = $proveedor;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertProveedor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertProveedor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertProveedor()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertProveedor_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertProveedor_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertProveedor failed: unknown result");
  }

  public function deleteProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $this->send_deleteProveedor($busqueda, $proveedor);
    return $this->recv_deleteProveedor();
  }

  public function send_deleteProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $args = new \Inventario_deleteProveedor_args();
    $args->busqueda = $busqueda;
    $args->proveedor = $proveedor;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteProveedor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteProveedor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteProveedor()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteProveedor_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteProveedor_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteProveedor failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class Inventario_getItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'item',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Item',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Item
   */
  public $item = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['item'])) {
        $this->item = $vals['item'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->item = new \Item();
            $xfer += $this->item->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item !== null) {
      if (!is_object($this->item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item', TType::STRUCT, 2);
      $xfer += $this->item->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Item',
      ),
    );

  /**
   * @var \Item
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Item();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getItem_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'item',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Item',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Item
   */
  public $item = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['item'])) {
        $this->item = $vals['item'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->item = new \Item();
            $xfer += $this->item->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item !== null) {
      if (!is_object($this->item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item', TType::STRUCT, 2);
      $xfer += $this->item->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Item',
        ),
      ),
    );

  /**
   * @var \Item[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \Item();
              $xfer += $elem26->read($input);
              $this->success []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllItem_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'item',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Item',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Item
   */
  public $item = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['item'])) {
        $this->item = $vals['item'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->item = new \Item();
            $xfer += $this->item->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item !== null) {
      if (!is_object($this->item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item', TType::STRUCT, 2);
      $xfer += $this->item->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoItem_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'item',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Item',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Item
   */
  public $item = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['item'])) {
        $this->item = $vals['item'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->item = new \Item();
            $xfer += $this->item->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item !== null) {
      if (!is_object($this->item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item', TType::STRUCT, 2);
      $xfer += $this->item->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateItem_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'item',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Item',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Item
   */
  public $item = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['item'])) {
        $this->item = $vals['item'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->item = new \Item();
            $xfer += $this->item->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item !== null) {
      if (!is_object($this->item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item', TType::STRUCT, 2);
      $xfer += $this->item->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertItem_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'item',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Item',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Item
   */
  public $item = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['item'])) {
        $this->item = $vals['item'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->item = new \Item();
            $xfer += $this->item->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item !== null) {
      if (!is_object($this->item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item', TType::STRUCT, 2);
      $xfer += $this->item->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteItem_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getGrupo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'grupo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Grupo',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Grupo
   */
  public $grupo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['grupo'])) {
        $this->grupo = $vals['grupo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getGrupo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->grupo = new \Grupo();
            $xfer += $this->grupo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getGrupo_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grupo !== null) {
      if (!is_object($this->grupo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('grupo', TType::STRUCT, 2);
      $xfer += $this->grupo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getGrupo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Grupo',
      ),
    );

  /**
   * @var \Grupo
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getGrupo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Grupo();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getGrupo_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllGrupo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'grupo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Grupo',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Grupo
   */
  public $grupo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['grupo'])) {
        $this->grupo = $vals['grupo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllGrupo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->grupo = new \Grupo();
            $xfer += $this->grupo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllGrupo_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grupo !== null) {
      if (!is_object($this->grupo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('grupo', TType::STRUCT, 2);
      $xfer += $this->grupo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllGrupo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Grupo',
        ),
      ),
    );

  /**
   * @var \Grupo[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllGrupo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \Grupo();
              $xfer += $elem33->read($input);
              $this->success []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllGrupo_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoGrupo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'grupo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Grupo',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Grupo
   */
  public $grupo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['grupo'])) {
        $this->grupo = $vals['grupo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoGrupo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->grupo = new \Grupo();
            $xfer += $this->grupo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoGrupo_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grupo !== null) {
      if (!is_object($this->grupo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('grupo', TType::STRUCT, 2);
      $xfer += $this->grupo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoGrupo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoGrupo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoGrupo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateGrupo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'grupo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Grupo',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Grupo
   */
  public $grupo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['grupo'])) {
        $this->grupo = $vals['grupo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateGrupo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->grupo = new \Grupo();
            $xfer += $this->grupo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateGrupo_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grupo !== null) {
      if (!is_object($this->grupo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('grupo', TType::STRUCT, 2);
      $xfer += $this->grupo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateGrupo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateGrupo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateGrupo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertGrupo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'grupo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Grupo',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Grupo
   */
  public $grupo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['grupo'])) {
        $this->grupo = $vals['grupo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertGrupo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->grupo = new \Grupo();
            $xfer += $this->grupo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertGrupo_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grupo !== null) {
      if (!is_object($this->grupo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('grupo', TType::STRUCT, 2);
      $xfer += $this->grupo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertGrupo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertGrupo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertGrupo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteGrupo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'grupo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Grupo',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Grupo
   */
  public $grupo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['grupo'])) {
        $this->grupo = $vals['grupo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteGrupo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->grupo = new \Grupo();
            $xfer += $this->grupo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteGrupo_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grupo !== null) {
      if (!is_object($this->grupo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('grupo', TType::STRUCT, 2);
      $xfer += $this->grupo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteGrupo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteGrupo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteGrupo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getCompuesto_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compuesto',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Compuesto
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getCompuesto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \Compuesto();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getCompuesto_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getCompuesto_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compuesto',
      ),
    );

  /**
   * @var \Compuesto
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getCompuesto_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Compuesto();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getCompuesto_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllCompuesto_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compuesto',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Compuesto
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllCompuesto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \Compuesto();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllCompuesto_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllCompuesto_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Compuesto',
        ),
      ),
    );

  /**
   * @var \Compuesto[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllCompuesto_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \Compuesto();
              $xfer += $elem40->read($input);
              $this->success []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllCompuesto_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoCompuesto_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compuesto',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Compuesto
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoCompuesto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \Compuesto();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoCompuesto_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoCompuesto_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoCompuesto_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoCompuesto_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateCompuesto_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compuesto',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Compuesto
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateCompuesto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \Compuesto();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateCompuesto_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateCompuesto_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateCompuesto_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateCompuesto_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertCompuesto_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compuesto',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Compuesto
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertCompuesto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \Compuesto();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertCompuesto_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertCompuesto_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertCompuesto_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertCompuesto_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteCompuesto_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compuesto',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Compuesto
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteCompuesto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \Compuesto();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteCompuesto_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteCompuesto_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteCompuesto_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteCompuesto_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getCompuestoItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompuestoItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \CompuestoItem
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getCompuestoItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \CompuestoItem();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getCompuestoItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getCompuestoItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompuestoItem',
      ),
    );

  /**
   * @var \CompuestoItem
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getCompuestoItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CompuestoItem();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getCompuestoItem_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllCompuestoItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompuestoItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \CompuestoItem
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllCompuestoItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \CompuestoItem();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllCompuestoItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllCompuestoItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\CompuestoItem',
        ),
      ),
    );

  /**
   * @var \CompuestoItem[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllCompuestoItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $elem47 = new \CompuestoItem();
              $xfer += $elem47->read($input);
              $this->success []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllCompuestoItem_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter48)
          {
            $xfer += $iter48->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoCompuestoItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompuestoItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \CompuestoItem
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoCompuestoItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \CompuestoItem();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoCompuestoItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoCompuestoItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoCompuestoItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoCompuestoItem_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateCompuestoItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompuestoItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \CompuestoItem
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateCompuestoItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \CompuestoItem();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateCompuestoItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateCompuestoItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateCompuestoItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateCompuestoItem_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertCompuestoItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompuestoItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \CompuestoItem
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertCompuestoItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \CompuestoItem();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertCompuestoItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertCompuestoItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertCompuestoItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertCompuestoItem_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteCompuestoItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompuestoItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \CompuestoItem
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteCompuestoItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \CompuestoItem();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteCompuestoItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteCompuestoItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteCompuestoItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteCompuestoItem_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getPromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'promo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Promocion',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Promocion
   */
  public $promo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['promo'])) {
        $this->promo = $vals['promo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getPromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->promo = new \Promocion();
            $xfer += $this->promo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getPromocion_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promo !== null) {
      if (!is_object($this->promo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promo', TType::STRUCT, 2);
      $xfer += $this->promo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getPromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Promocion',
      ),
    );

  /**
   * @var \Promocion
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getPromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Promocion();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getPromocion_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllPromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'promo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Promocion',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Promocion
   */
  public $promo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['promo'])) {
        $this->promo = $vals['promo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllPromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->promo = new \Promocion();
            $xfer += $this->promo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllPromocion_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promo !== null) {
      if (!is_object($this->promo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promo', TType::STRUCT, 2);
      $xfer += $this->promo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllPromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Promocion',
        ),
      ),
    );

  /**
   * @var \Promocion[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllPromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $elem54 = new \Promocion();
              $xfer += $elem54->read($input);
              $this->success []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllPromocion_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter55)
          {
            $xfer += $iter55->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoPromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'promo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Promocion',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Promocion
   */
  public $promo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['promo'])) {
        $this->promo = $vals['promo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoPromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->promo = new \Promocion();
            $xfer += $this->promo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoPromocion_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promo !== null) {
      if (!is_object($this->promo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promo', TType::STRUCT, 2);
      $xfer += $this->promo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoPromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoPromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoPromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updatePromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'promo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Promocion',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Promocion
   */
  public $promo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['promo'])) {
        $this->promo = $vals['promo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updatePromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->promo = new \Promocion();
            $xfer += $this->promo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updatePromocion_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promo !== null) {
      if (!is_object($this->promo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promo', TType::STRUCT, 2);
      $xfer += $this->promo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updatePromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updatePromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updatePromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertPromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'promo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Promocion',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Promocion
   */
  public $promo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['promo'])) {
        $this->promo = $vals['promo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertPromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->promo = new \Promocion();
            $xfer += $this->promo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertPromocion_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promo !== null) {
      if (!is_object($this->promo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promo', TType::STRUCT, 2);
      $xfer += $this->promo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertPromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertPromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertPromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deletePromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'promo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Promocion',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Promocion
   */
  public $promo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['promo'])) {
        $this->promo = $vals['promo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deletePromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->promo = new \Promocion();
            $xfer += $this->promo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deletePromocion_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promo !== null) {
      if (!is_object($this->promo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promo', TType::STRUCT, 2);
      $xfer += $this->promo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deletePromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deletePromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deletePromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getIngreso_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'ingreso',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Ingreso',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Ingreso
   */
  public $ingreso = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['ingreso'])) {
        $this->ingreso = $vals['ingreso'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getIngreso_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ingreso = new \Ingreso();
            $xfer += $this->ingreso->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getIngreso_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ingreso !== null) {
      if (!is_object($this->ingreso)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ingreso', TType::STRUCT, 2);
      $xfer += $this->ingreso->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getIngreso_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Ingreso',
      ),
    );

  /**
   * @var \Ingreso
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getIngreso_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Ingreso();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getIngreso_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllIngreso_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'ingreso',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Ingreso',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Ingreso
   */
  public $ingreso = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['ingreso'])) {
        $this->ingreso = $vals['ingreso'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllIngreso_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ingreso = new \Ingreso();
            $xfer += $this->ingreso->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllIngreso_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ingreso !== null) {
      if (!is_object($this->ingreso)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ingreso', TType::STRUCT, 2);
      $xfer += $this->ingreso->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllIngreso_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Ingreso',
        ),
      ),
    );

  /**
   * @var \Ingreso[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllIngreso_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readListBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $elem61 = new \Ingreso();
              $xfer += $elem61->read($input);
              $this->success []= $elem61;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllIngreso_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter62)
          {
            $xfer += $iter62->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertIngreso_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'ingreso',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Ingreso',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Ingreso
   */
  public $ingreso = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['ingreso'])) {
        $this->ingreso = $vals['ingreso'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertIngreso_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ingreso = new \Ingreso();
            $xfer += $this->ingreso->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertIngreso_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ingreso !== null) {
      if (!is_object($this->ingreso)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ingreso', TType::STRUCT, 2);
      $xfer += $this->ingreso->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertIngreso_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertIngreso_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertIngreso_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteIngreso_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'ingreso',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Ingreso',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Ingreso
   */
  public $ingreso = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['ingreso'])) {
        $this->ingreso = $vals['ingreso'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteIngreso_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ingreso = new \Ingreso();
            $xfer += $this->ingreso->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteIngreso_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ingreso !== null) {
      if (!is_object($this->ingreso)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ingreso', TType::STRUCT, 2);
      $xfer += $this->ingreso->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteIngreso_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteIngreso_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteIngreso_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getOrdenCompra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompra',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompra
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getOrdenCompra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompra();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getOrdenCompra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getOrdenCompra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompra',
      ),
    );

  /**
   * @var \OrdenCompra
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getOrdenCompra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \OrdenCompra();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getOrdenCompra_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getOrdenCompraItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompraItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompraItem
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getOrdenCompraItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompraItem();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getOrdenCompraItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getOrdenCompraItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompraItem',
      ),
    );

  /**
   * @var \OrdenCompraItem
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getOrdenCompraItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \OrdenCompraItem();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getOrdenCompraItem_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllOrdenCompra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompra',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompra
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllOrdenCompra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompra();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllOrdenCompra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllOrdenCompra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\OrdenCompra',
        ),
      ),
    );

  /**
   * @var \OrdenCompra[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllOrdenCompra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $elem68 = new \OrdenCompra();
              $xfer += $elem68->read($input);
              $this->success []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllOrdenCompra_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter69)
          {
            $xfer += $iter69->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertOrdenCompra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompra',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompra
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertOrdenCompra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompra();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertOrdenCompra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertOrdenCompra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertOrdenCompra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertOrdenCompra_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteOrdenCompra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompra',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompra
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteOrdenCompra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompra();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteOrdenCompra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteOrdenCompra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteOrdenCompra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteOrdenCompra_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateOrdenCompra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompra',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompra
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateOrdenCompra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompra();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateOrdenCompra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateOrdenCompra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateOrdenCompra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateOrdenCompra_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoOrdenCompra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompra',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompra
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoOrdenCompra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompra();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoOrdenCompra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoOrdenCompra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoOrdenCompra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoOrdenCompra_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteOrdenCompra_item_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompraItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompraItem
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteOrdenCompra_item_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompraItem();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteOrdenCompra_item_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteOrdenCompra_item_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteOrdenCompra_item_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteOrdenCompra_item_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertOrdenCompra_item_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompraItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompraItem
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertOrdenCompra_item_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompraItem();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertOrdenCompra_item_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertOrdenCompra_item_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertOrdenCompra_item_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertOrdenCompra_item_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateOrdenCompra_item_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompraItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompraItem
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateOrdenCompra_item_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompraItem();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateOrdenCompra_item_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateOrdenCompra_item_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateOrdenCompra_item_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateOrdenCompra_item_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getProveedor_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'proveedor',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Proveedor',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Proveedor
   */
  public $proveedor = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['proveedor'])) {
        $this->proveedor = $vals['proveedor'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getProveedor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->proveedor = new \Proveedor();
            $xfer += $this->proveedor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getProveedor_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->proveedor !== null) {
      if (!is_object($this->proveedor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('proveedor', TType::STRUCT, 2);
      $xfer += $this->proveedor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getProveedor_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Proveedor',
      ),
    );

  /**
   * @var \Proveedor
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getProveedor_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Proveedor();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getProveedor_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllProveedor_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'proveedor',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Proveedor',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Proveedor
   */
  public $proveedor = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['proveedor'])) {
        $this->proveedor = $vals['proveedor'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllProveedor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->proveedor = new \Proveedor();
            $xfer += $this->proveedor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllProveedor_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->proveedor !== null) {
      if (!is_object($this->proveedor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('proveedor', TType::STRUCT, 2);
      $xfer += $this->proveedor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllProveedor_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Proveedor',
        ),
      ),
    );

  /**
   * @var \Proveedor[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllProveedor_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size70 = 0;
            $_etype73 = 0;
            $xfer += $input->readListBegin($_etype73, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $elem75 = null;
              $elem75 = new \Proveedor();
              $xfer += $elem75->read($input);
              $this->success []= $elem75;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllProveedor_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter76)
          {
            $xfer += $iter76->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoProveedor_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'proveedor',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Proveedor',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Proveedor
   */
  public $proveedor = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['proveedor'])) {
        $this->proveedor = $vals['proveedor'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoProveedor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->proveedor = new \Proveedor();
            $xfer += $this->proveedor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoProveedor_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->proveedor !== null) {
      if (!is_object($this->proveedor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('proveedor', TType::STRUCT, 2);
      $xfer += $this->proveedor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoProveedor_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoProveedor_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoProveedor_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateProveedor_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'proveedor',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Proveedor',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Proveedor
   */
  public $proveedor = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['proveedor'])) {
        $this->proveedor = $vals['proveedor'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateProveedor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->proveedor = new \Proveedor();
            $xfer += $this->proveedor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateProveedor_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->proveedor !== null) {
      if (!is_object($this->proveedor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('proveedor', TType::STRUCT, 2);
      $xfer += $this->proveedor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateProveedor_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateProveedor_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateProveedor_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertProveedor_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'proveedor',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Proveedor',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Proveedor
   */
  public $proveedor = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['proveedor'])) {
        $this->proveedor = $vals['proveedor'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertProveedor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->proveedor = new \Proveedor();
            $xfer += $this->proveedor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertProveedor_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->proveedor !== null) {
      if (!is_object($this->proveedor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('proveedor', TType::STRUCT, 2);
      $xfer += $this->proveedor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertProveedor_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertProveedor_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertProveedor_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteProveedor_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'proveedor',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Proveedor',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Proveedor
   */
  public $proveedor = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['proveedor'])) {
        $this->proveedor = $vals['proveedor'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteProveedor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->proveedor = new \Proveedor();
            $xfer += $this->proveedor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteProveedor_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->proveedor !== null) {
      if (!is_object($this->proveedor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('proveedor', TType::STRUCT, 2);
      $xfer += $this->proveedor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteProveedor_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteProveedor_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteProveedor_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


