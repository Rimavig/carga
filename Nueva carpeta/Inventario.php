<?php
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface InventarioIf {
  /**
   * @param \Busqueda $busqueda
   * @param \Item $item
   * @return \Item
   */
  public function getItem(\Busqueda $busqueda, \Item $item);
  /**
   * @param \Busqueda $busqueda
   * @param \Item $item
   * @return \Item[]
   */
  public function getAllItem(\Busqueda $busqueda, \Item $item);
  /**
   * @param \Busqueda $busqueda
   * @param \Item $item
   * @return string
   */
  public function updateEstadoItem(\Busqueda $busqueda, \Item $item);
  /**
   * @param \Busqueda $busqueda
   * @param \Item $item
   * @return string
   */
  public function updateItem(\Busqueda $busqueda, \Item $item);
  /**
   * @param \Busqueda $busqueda
   * @param \Item $item
   * @return string
   */
  public function insertItem(\Busqueda $busqueda, \Item $item);
  /**
   * @param \Busqueda $busqueda
   * @param \Item $item
   * @return string
   */
  public function deleteItem(\Busqueda $busqueda, \Item $item);
  /**
   * @param \Busqueda $busqueda
   * @param \Grupo $grupo
   * @return \Grupo
   */
  public function getGrupo(\Busqueda $busqueda, \Grupo $grupo);
  /**
   * @param \Busqueda $busqueda
   * @param \Grupo $grupo
   * @return \Grupo[]
   */
  public function getAllGrupo(\Busqueda $busqueda, \Grupo $grupo);
  /**
   * @param \Busqueda $busqueda
   * @param \Grupo $grupo
   * @return string
   */
  public function updateEstadoGrupo(\Busqueda $busqueda, \Grupo $grupo);
  /**
   * @param \Busqueda $busqueda
   * @param \Grupo $grupo
   * @return string
   */
  public function updateGrupo(\Busqueda $busqueda, \Grupo $grupo);
  /**
   * @param \Busqueda $busqueda
   * @param \Grupo $grupo
   * @return string
   */
  public function insertGrupo(\Busqueda $busqueda, \Grupo $grupo);
  /**
   * @param \Busqueda $busqueda
   * @param \Grupo $grupo
   * @return string
   */
  public function deleteGrupo(\Busqueda $busqueda, \Grupo $grupo);
  /**
   * @param \Busqueda $busqueda
   * @param \Compuesto $compuesto
   * @return \Compuesto
   */
  public function getCompuesto(\Busqueda $busqueda, \Compuesto $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \Compuesto $compuesto
   * @return \Compuesto[]
   */
  public function getAllCompuesto(\Busqueda $busqueda, \Compuesto $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \Compuesto $compuesto
   * @return string
   */
  public function updateEstadoCompuesto(\Busqueda $busqueda, \Compuesto $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \Compuesto $compuesto
   * @return string
   */
  public function updateCompuesto(\Busqueda $busqueda, \Compuesto $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \Compuesto $compuesto
   * @return string
   */
  public function insertCompuesto(\Busqueda $busqueda, \Compuesto $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \Compuesto $compuesto
   * @return string
   */
  public function deleteCompuesto(\Busqueda $busqueda, \Compuesto $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \CompuestoItem $compuesto
   * @return \CompuestoItem
   */
  public function getCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \CompuestoItem $compuesto
   * @return \CompuestoItem[]
   */
  public function getAllCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \CompuestoItem $compuesto
   * @return string
   */
  public function updateEstadoCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \CompuestoItem $compuesto
   * @return string
   */
  public function updateCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \CompuestoItem $compuesto
   * @return string
   */
  public function insertCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \CompuestoItem $compuesto
   * @return string
   */
  public function deleteCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto);
  /**
   * @param \Busqueda $busqueda
   * @param \Promocion $promo
   * @return \Promocion
   */
  public function getPromocion(\Busqueda $busqueda, \Promocion $promo);
  /**
   * @param \Busqueda $busqueda
   * @param \Promocion $promo
   * @return \Promocion[]
   */
  public function getAllPromocion(\Busqueda $busqueda, \Promocion $promo);
  /**
   * @param \Busqueda $busqueda
   * @param \Promocion $promo
   * @return string
   */
  public function updateEstadoPromocion(\Busqueda $busqueda, \Promocion $promo);
  /**
   * @param \Busqueda $busqueda
   * @param \Promocion $promo
   * @return string
   */
  public function updatePromocion(\Busqueda $busqueda, \Promocion $promo);
  /**
   * @param \Busqueda $busqueda
   * @param \Promocion $promo
   * @return string
   */
  public function insertPromocion(\Busqueda $busqueda, \Promocion $promo);
  /**
   * @param \Busqueda $busqueda
   * @param \Promocion $promo
   * @return string
   */
  public function deletePromocion(\Busqueda $busqueda, \Promocion $promo);
  /**
   * @param \Busqueda $busqueda
   * @param \Ingreso $ingreso
   * @return \Ingreso
   */
  public function getIngreso(\Busqueda $busqueda, \Ingreso $ingreso);
  /**
   * @param \Busqueda $busqueda
   * @param \Ingreso $ingreso
   * @return \Ingreso[]
   */
  public function getAllIngreso(\Busqueda $busqueda, \Ingreso $ingreso);
  /**
   * @param \Busqueda $busqueda
   * @param \Ingreso $ingreso
   * @return string
   */
  public function insertIngreso(\Busqueda $busqueda, \Ingreso $ingreso);
  /**
   * @param \Busqueda $busqueda
   * @param \Ingreso $ingreso
   * @return string
   */
  public function deleteIngreso(\Busqueda $busqueda, \Ingreso $ingreso);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompra $orden
   * @return \OrdenCompra
   */
  public function getOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompraItem $orden
   * @return \OrdenCompraItem
   */
  public function getOrdenCompraItem(\Busqueda $busqueda, \OrdenCompraItem $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompra $orden
   * @return \OrdenCompra[]
   */
  public function getAllOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompra $orden
   * @return string
   */
  public function insertOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompra $orden
   * @return string
   */
  public function deleteOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompra $orden
   * @return string
   */
  public function updateOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompra $orden
   * @return string
   */
  public function updateEstadoOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompraItem $orden
   * @return string
   */
  public function deleteOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompraItem $orden
   * @return string
   */
  public function insertOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \OrdenCompraItem $orden
   * @return string
   */
  public function updateOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden);
  /**
   * @param \Busqueda $busqueda
   * @param \Proveedor $proveedor
   * @return \Proveedor
   */
  public function getProveedor(\Busqueda $busqueda, \Proveedor $proveedor);
  /**
   * @param \Busqueda $busqueda
   * @param \Proveedor $proveedor
   * @return \Proveedor[]
   */
  public function getAllProveedor(\Busqueda $busqueda, \Proveedor $proveedor);
  /**
   * @param \Busqueda $busqueda
   * @param \Proveedor $proveedor
   * @return string
   */
  public function updateEstadoProveedor(\Busqueda $busqueda, \Proveedor $proveedor);
  /**
   * @param \Busqueda $busqueda
   * @param \Proveedor $proveedor
   * @return string
   */
  public function updateProveedor(\Busqueda $busqueda, \Proveedor $proveedor);
  /**
   * @param \Busqueda $busqueda
   * @param \Proveedor $proveedor
   * @return string
   */
  public function insertProveedor(\Busqueda $busqueda, \Proveedor $proveedor);
  /**
   * @param \Busqueda $busqueda
   * @param \Proveedor $proveedor
   * @return string
   */
  public function deleteProveedor(\Busqueda $busqueda, \Proveedor $proveedor);
  /**
   * @param \Busqueda $busqueda
   * @param \Tarjeta $objeto
   * @return \Tarjeta
   */
  public function getTarjeta(\Busqueda $busqueda, \Tarjeta $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Tarjeta $objeto
   * @return \Tarjeta[]
   */
  public function getAllTarjeta(\Busqueda $busqueda, \Tarjeta $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Banco $objeto
   * @return \Banco
   */
  public function getBanco(\Busqueda $busqueda, \Banco $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Banco $objeto
   * @return \Banco[]
   */
  public function getAllBanco(\Busqueda $busqueda, \Banco $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \CompraTarjeta $objeto
   * @return \CompraTarjeta
   */
  public function getCompraTarjeta(\Busqueda $busqueda, \CompraTarjeta $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \CompraTarjeta $objeto
   * @return \CompraTarjeta[]
   */
  public function getAllCompraTarjeta_compra(\Busqueda $busqueda, \CompraTarjeta $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \CompraTarjeta $objeto
   * @return string
   */
  public function deleteCompraTarjeta(\Busqueda $busqueda, \CompraTarjeta $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \CompraTarjeta $objeto
   * @return string
   */
  public function insertCompraTarjeta(\Busqueda $busqueda, \CompraTarjeta $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Facturacion $objeto
   * @return \Facturacion
   */
  public function getFacturacion(\Busqueda $busqueda, \Facturacion $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Facturacion $objeto
   * @return \Facturacion[]
   */
  public function getAllFacturacion_usuario(\Busqueda $busqueda, \Facturacion $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Facturacion $objeto
   * @return string
   */
  public function updateFacturacion(\Busqueda $busqueda, \Facturacion $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Compra $objeto
   * @return \Compra
   */
  public function getCompra(\Busqueda $busqueda, \Compra $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Compra $objeto
   * @return \Compra[]
   */
  public function getAllCompra(\Busqueda $busqueda, \Compra $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Compra $objeto
   * @return string
   */
  public function updateCompra(\Busqueda $busqueda, \Compra $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Compra $objeto
   * @return string
   */
  public function insertCompra(\Busqueda $busqueda, \Compra $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Precuenta $objeto
   * @return \Precuenta
   */
  public function getPrecuenta(\Busqueda $busqueda, \Precuenta $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Precuenta $objeto
   * @return \Precuenta[]
   */
  public function getAllPrecuenta(\Busqueda $busqueda, \Precuenta $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Precuenta $objeto
   * @return string
   */
  public function updateEstadoPrecuenta(\Busqueda $busqueda, \Precuenta $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Precuenta $objeto
   * @return string
   */
  public function updatePrecuenta(\Busqueda $busqueda, \Precuenta $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Precuenta $objeto
   * @return string
   */
  public function insertPrecuenta(\Busqueda $busqueda, \Precuenta $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Precuenta $objeto
   * @return string
   */
  public function deletePrecuenta(\Busqueda $busqueda, \Precuenta $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Reserva $objeto
   * @return \Reserva
   */
  public function getReserva(\Busqueda $busqueda, \Reserva $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Reserva $objeto
   * @return \Reserva[]
   */
  public function getAllReserva(\Busqueda $busqueda, \Reserva $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Reserva $objeto
   * @return string
   */
  public function updateEstadoReserva(\Busqueda $busqueda, \Reserva $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Reserva $objeto
   * @return string
   */
  public function updateReserva(\Busqueda $busqueda, \Reserva $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Reserva $objeto
   * @return string
   */
  public function insertReserva(\Busqueda $busqueda, \Reserva $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Reserva $objeto
   * @return string
   */
  public function deleteReserva(\Busqueda $busqueda, \Reserva $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Pedido $objeto
   * @return \Pedido
   */
  public function getPedido(\Busqueda $busqueda, \Pedido $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Pedido $objeto
   * @return \Pedido[]
   */
  public function getAllPedido(\Busqueda $busqueda, \Pedido $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Pedido $objeto
   * @return string
   */
  public function updateEstadoPedido(\Busqueda $busqueda, \Pedido $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Pedido $objeto
   * @return string
   */
  public function updatePedido(\Busqueda $busqueda, \Pedido $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Pedido $objeto
   * @return string
   */
  public function insertPedido(\Busqueda $busqueda, \Pedido $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \Pedido $objeto
   * @return string
   */
  public function deletePedido(\Busqueda $busqueda, \Pedido $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \PedidoIC $objeto
   * @return \PedidoIC
   */
  public function getPedidoIC(\Busqueda $busqueda, \PedidoIC $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \PedidoIC $objeto
   * @return \PedidoIC[]
   */
  public function getAllPedidoIC(\Busqueda $busqueda, \PedidoIC $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \PedidoIC $objeto
   * @return string
   */
  public function updateEstadoPedidoIC(\Busqueda $busqueda, \PedidoIC $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \PedidoIC $objeto
   * @return string
   */
  public function updatePedidoIC(\Busqueda $busqueda, \PedidoIC $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \PedidoIC $objeto
   * @return string
   */
  public function insertPedidoIC(\Busqueda $busqueda, \PedidoIC $objeto);
  /**
   * @param \Busqueda $busqueda
   * @param \PedidoIC $objeto
   * @return string
   */
  public function deletePedidoIC(\Busqueda $busqueda, \PedidoIC $objeto);
}


class InventarioClient implements \InventarioIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getItem(\Busqueda $busqueda, \Item $item)
  {
    $this->send_getItem($busqueda, $item);
    return $this->recv_getItem();
  }

  public function send_getItem(\Busqueda $busqueda, \Item $item)
  {
    $args = new \Inventario_getItem_args();
    $args->busqueda = $busqueda;
    $args->item = $item;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItem failed: unknown result");
  }

  public function getAllItem(\Busqueda $busqueda, \Item $item)
  {
    $this->send_getAllItem($busqueda, $item);
    return $this->recv_getAllItem();
  }

  public function send_getAllItem(\Busqueda $busqueda, \Item $item)
  {
    $args = new \Inventario_getAllItem_args();
    $args->busqueda = $busqueda;
    $args->item = $item;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllItem failed: unknown result");
  }

  public function updateEstadoItem(\Busqueda $busqueda, \Item $item)
  {
    $this->send_updateEstadoItem($busqueda, $item);
    return $this->recv_updateEstadoItem();
  }

  public function send_updateEstadoItem(\Busqueda $busqueda, \Item $item)
  {
    $args = new \Inventario_updateEstadoItem_args();
    $args->busqueda = $busqueda;
    $args->item = $item;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoItem failed: unknown result");
  }

  public function updateItem(\Busqueda $busqueda, \Item $item)
  {
    $this->send_updateItem($busqueda, $item);
    return $this->recv_updateItem();
  }

  public function send_updateItem(\Busqueda $busqueda, \Item $item)
  {
    $args = new \Inventario_updateItem_args();
    $args->busqueda = $busqueda;
    $args->item = $item;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateItem failed: unknown result");
  }

  public function insertItem(\Busqueda $busqueda, \Item $item)
  {
    $this->send_insertItem($busqueda, $item);
    return $this->recv_insertItem();
  }

  public function send_insertItem(\Busqueda $busqueda, \Item $item)
  {
    $args = new \Inventario_insertItem_args();
    $args->busqueda = $busqueda;
    $args->item = $item;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertItem failed: unknown result");
  }

  public function deleteItem(\Busqueda $busqueda, \Item $item)
  {
    $this->send_deleteItem($busqueda, $item);
    return $this->recv_deleteItem();
  }

  public function send_deleteItem(\Busqueda $busqueda, \Item $item)
  {
    $args = new \Inventario_deleteItem_args();
    $args->busqueda = $busqueda;
    $args->item = $item;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteItem failed: unknown result");
  }

  public function getGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $this->send_getGrupo($busqueda, $grupo);
    return $this->recv_getGrupo();
  }

  public function send_getGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $args = new \Inventario_getGrupo_args();
    $args->busqueda = $busqueda;
    $args->grupo = $grupo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGrupo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGrupo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGrupo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getGrupo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getGrupo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGrupo failed: unknown result");
  }

  public function getAllGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $this->send_getAllGrupo($busqueda, $grupo);
    return $this->recv_getAllGrupo();
  }

  public function send_getAllGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $args = new \Inventario_getAllGrupo_args();
    $args->busqueda = $busqueda;
    $args->grupo = $grupo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllGrupo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllGrupo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllGrupo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllGrupo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllGrupo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllGrupo failed: unknown result");
  }

  public function updateEstadoGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $this->send_updateEstadoGrupo($busqueda, $grupo);
    return $this->recv_updateEstadoGrupo();
  }

  public function send_updateEstadoGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $args = new \Inventario_updateEstadoGrupo_args();
    $args->busqueda = $busqueda;
    $args->grupo = $grupo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoGrupo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoGrupo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoGrupo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoGrupo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoGrupo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoGrupo failed: unknown result");
  }

  public function updateGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $this->send_updateGrupo($busqueda, $grupo);
    return $this->recv_updateGrupo();
  }

  public function send_updateGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $args = new \Inventario_updateGrupo_args();
    $args->busqueda = $busqueda;
    $args->grupo = $grupo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateGrupo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateGrupo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateGrupo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateGrupo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateGrupo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateGrupo failed: unknown result");
  }

  public function insertGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $this->send_insertGrupo($busqueda, $grupo);
    return $this->recv_insertGrupo();
  }

  public function send_insertGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $args = new \Inventario_insertGrupo_args();
    $args->busqueda = $busqueda;
    $args->grupo = $grupo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertGrupo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertGrupo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertGrupo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertGrupo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertGrupo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertGrupo failed: unknown result");
  }

  public function deleteGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $this->send_deleteGrupo($busqueda, $grupo);
    return $this->recv_deleteGrupo();
  }

  public function send_deleteGrupo(\Busqueda $busqueda, \Grupo $grupo)
  {
    $args = new \Inventario_deleteGrupo_args();
    $args->busqueda = $busqueda;
    $args->grupo = $grupo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteGrupo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteGrupo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteGrupo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteGrupo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteGrupo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteGrupo failed: unknown result");
  }

  public function getCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $this->send_getCompuesto($busqueda, $compuesto);
    return $this->recv_getCompuesto();
  }

  public function send_getCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $args = new \Inventario_getCompuesto_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCompuesto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCompuesto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCompuesto()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getCompuesto_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getCompuesto_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCompuesto failed: unknown result");
  }

  public function getAllCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $this->send_getAllCompuesto($busqueda, $compuesto);
    return $this->recv_getAllCompuesto();
  }

  public function send_getAllCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $args = new \Inventario_getAllCompuesto_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllCompuesto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllCompuesto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllCompuesto()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllCompuesto_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllCompuesto_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllCompuesto failed: unknown result");
  }

  public function updateEstadoCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $this->send_updateEstadoCompuesto($busqueda, $compuesto);
    return $this->recv_updateEstadoCompuesto();
  }

  public function send_updateEstadoCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $args = new \Inventario_updateEstadoCompuesto_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoCompuesto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoCompuesto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoCompuesto()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoCompuesto_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoCompuesto_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoCompuesto failed: unknown result");
  }

  public function updateCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $this->send_updateCompuesto($busqueda, $compuesto);
    return $this->recv_updateCompuesto();
  }

  public function send_updateCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $args = new \Inventario_updateCompuesto_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateCompuesto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateCompuesto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateCompuesto()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateCompuesto_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateCompuesto_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateCompuesto failed: unknown result");
  }

  public function insertCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $this->send_insertCompuesto($busqueda, $compuesto);
    return $this->recv_insertCompuesto();
  }

  public function send_insertCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $args = new \Inventario_insertCompuesto_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertCompuesto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertCompuesto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertCompuesto()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertCompuesto_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertCompuesto_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertCompuesto failed: unknown result");
  }

  public function deleteCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $this->send_deleteCompuesto($busqueda, $compuesto);
    return $this->recv_deleteCompuesto();
  }

  public function send_deleteCompuesto(\Busqueda $busqueda, \Compuesto $compuesto)
  {
    $args = new \Inventario_deleteCompuesto_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteCompuesto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteCompuesto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteCompuesto()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteCompuesto_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteCompuesto_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteCompuesto failed: unknown result");
  }

  public function getCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $this->send_getCompuestoItem($busqueda, $compuesto);
    return $this->recv_getCompuestoItem();
  }

  public function send_getCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $args = new \Inventario_getCompuestoItem_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCompuestoItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCompuestoItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCompuestoItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getCompuestoItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getCompuestoItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCompuestoItem failed: unknown result");
  }

  public function getAllCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $this->send_getAllCompuestoItem($busqueda, $compuesto);
    return $this->recv_getAllCompuestoItem();
  }

  public function send_getAllCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $args = new \Inventario_getAllCompuestoItem_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllCompuestoItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllCompuestoItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllCompuestoItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllCompuestoItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllCompuestoItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllCompuestoItem failed: unknown result");
  }

  public function updateEstadoCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $this->send_updateEstadoCompuestoItem($busqueda, $compuesto);
    return $this->recv_updateEstadoCompuestoItem();
  }

  public function send_updateEstadoCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $args = new \Inventario_updateEstadoCompuestoItem_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoCompuestoItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoCompuestoItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoCompuestoItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoCompuestoItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoCompuestoItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoCompuestoItem failed: unknown result");
  }

  public function updateCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $this->send_updateCompuestoItem($busqueda, $compuesto);
    return $this->recv_updateCompuestoItem();
  }

  public function send_updateCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $args = new \Inventario_updateCompuestoItem_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateCompuestoItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateCompuestoItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateCompuestoItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateCompuestoItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateCompuestoItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateCompuestoItem failed: unknown result");
  }

  public function insertCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $this->send_insertCompuestoItem($busqueda, $compuesto);
    return $this->recv_insertCompuestoItem();
  }

  public function send_insertCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $args = new \Inventario_insertCompuestoItem_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertCompuestoItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertCompuestoItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertCompuestoItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertCompuestoItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertCompuestoItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertCompuestoItem failed: unknown result");
  }

  public function deleteCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $this->send_deleteCompuestoItem($busqueda, $compuesto);
    return $this->recv_deleteCompuestoItem();
  }

  public function send_deleteCompuestoItem(\Busqueda $busqueda, \CompuestoItem $compuesto)
  {
    $args = new \Inventario_deleteCompuestoItem_args();
    $args->busqueda = $busqueda;
    $args->compuesto = $compuesto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteCompuestoItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteCompuestoItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteCompuestoItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteCompuestoItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteCompuestoItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteCompuestoItem failed: unknown result");
  }

  public function getPromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $this->send_getPromocion($busqueda, $promo);
    return $this->recv_getPromocion();
  }

  public function send_getPromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $args = new \Inventario_getPromocion_args();
    $args->busqueda = $busqueda;
    $args->promo = $promo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getPromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getPromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPromocion failed: unknown result");
  }

  public function getAllPromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $this->send_getAllPromocion($busqueda, $promo);
    return $this->recv_getAllPromocion();
  }

  public function send_getAllPromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $args = new \Inventario_getAllPromocion_args();
    $args->busqueda = $busqueda;
    $args->promo = $promo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllPromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllPromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllPromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllPromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllPromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllPromocion failed: unknown result");
  }

  public function updateEstadoPromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $this->send_updateEstadoPromocion($busqueda, $promo);
    return $this->recv_updateEstadoPromocion();
  }

  public function send_updateEstadoPromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $args = new \Inventario_updateEstadoPromocion_args();
    $args->busqueda = $busqueda;
    $args->promo = $promo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoPromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoPromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoPromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoPromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoPromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoPromocion failed: unknown result");
  }

  public function updatePromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $this->send_updatePromocion($busqueda, $promo);
    return $this->recv_updatePromocion();
  }

  public function send_updatePromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $args = new \Inventario_updatePromocion_args();
    $args->busqueda = $busqueda;
    $args->promo = $promo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updatePromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updatePromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePromocion failed: unknown result");
  }

  public function insertPromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $this->send_insertPromocion($busqueda, $promo);
    return $this->recv_insertPromocion();
  }

  public function send_insertPromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $args = new \Inventario_insertPromocion_args();
    $args->busqueda = $busqueda;
    $args->promo = $promo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertPromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertPromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertPromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertPromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertPromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertPromocion failed: unknown result");
  }

  public function deletePromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $this->send_deletePromocion($busqueda, $promo);
    return $this->recv_deletePromocion();
  }

  public function send_deletePromocion(\Busqueda $busqueda, \Promocion $promo)
  {
    $args = new \Inventario_deletePromocion_args();
    $args->busqueda = $busqueda;
    $args->promo = $promo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deletePromocion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deletePromocion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deletePromocion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deletePromocion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deletePromocion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deletePromocion failed: unknown result");
  }

  public function getIngreso(\Busqueda $busqueda, \Ingreso $ingreso)
  {
    $this->send_getIngreso($busqueda, $ingreso);
    return $this->recv_getIngreso();
  }

  public function send_getIngreso(\Busqueda $busqueda, \Ingreso $ingreso)
  {
    $args = new \Inventario_getIngreso_args();
    $args->busqueda = $busqueda;
    $args->ingreso = $ingreso;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getIngreso', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getIngreso', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getIngreso()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getIngreso_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getIngreso_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getIngreso failed: unknown result");
  }

  public function getAllIngreso(\Busqueda $busqueda, \Ingreso $ingreso)
  {
    $this->send_getAllIngreso($busqueda, $ingreso);
    return $this->recv_getAllIngreso();
  }

  public function send_getAllIngreso(\Busqueda $busqueda, \Ingreso $ingreso)
  {
    $args = new \Inventario_getAllIngreso_args();
    $args->busqueda = $busqueda;
    $args->ingreso = $ingreso;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllIngreso', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllIngreso', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllIngreso()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllIngreso_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllIngreso_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllIngreso failed: unknown result");
  }

  public function insertIngreso(\Busqueda $busqueda, \Ingreso $ingreso)
  {
    $this->send_insertIngreso($busqueda, $ingreso);
    return $this->recv_insertIngreso();
  }

  public function send_insertIngreso(\Busqueda $busqueda, \Ingreso $ingreso)
  {
    $args = new \Inventario_insertIngreso_args();
    $args->busqueda = $busqueda;
    $args->ingreso = $ingreso;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertIngreso', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertIngreso', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertIngreso()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertIngreso_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertIngreso_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertIngreso failed: unknown result");
  }

  public function deleteIngreso(\Busqueda $busqueda, \Ingreso $ingreso)
  {
    $this->send_deleteIngreso($busqueda, $ingreso);
    return $this->recv_deleteIngreso();
  }

  public function send_deleteIngreso(\Busqueda $busqueda, \Ingreso $ingreso)
  {
    $args = new \Inventario_deleteIngreso_args();
    $args->busqueda = $busqueda;
    $args->ingreso = $ingreso;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteIngreso', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteIngreso', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteIngreso()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteIngreso_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteIngreso_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteIngreso failed: unknown result");
  }

  public function getOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $this->send_getOrdenCompra($busqueda, $orden);
    return $this->recv_getOrdenCompra();
  }

  public function send_getOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $args = new \Inventario_getOrdenCompra_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrdenCompra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrdenCompra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrdenCompra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getOrdenCompra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getOrdenCompra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrdenCompra failed: unknown result");
  }

  public function getOrdenCompraItem(\Busqueda $busqueda, \OrdenCompraItem $orden)
  {
    $this->send_getOrdenCompraItem($busqueda, $orden);
    return $this->recv_getOrdenCompraItem();
  }

  public function send_getOrdenCompraItem(\Busqueda $busqueda, \OrdenCompraItem $orden)
  {
    $args = new \Inventario_getOrdenCompraItem_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrdenCompraItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrdenCompraItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrdenCompraItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getOrdenCompraItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getOrdenCompraItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrdenCompraItem failed: unknown result");
  }

  public function getAllOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $this->send_getAllOrdenCompra($busqueda, $orden);
    return $this->recv_getAllOrdenCompra();
  }

  public function send_getAllOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $args = new \Inventario_getAllOrdenCompra_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllOrdenCompra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllOrdenCompra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllOrdenCompra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllOrdenCompra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllOrdenCompra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllOrdenCompra failed: unknown result");
  }

  public function insertOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $this->send_insertOrdenCompra($busqueda, $orden);
    return $this->recv_insertOrdenCompra();
  }

  public function send_insertOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $args = new \Inventario_insertOrdenCompra_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertOrdenCompra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertOrdenCompra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertOrdenCompra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertOrdenCompra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertOrdenCompra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertOrdenCompra failed: unknown result");
  }

  public function deleteOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $this->send_deleteOrdenCompra($busqueda, $orden);
    return $this->recv_deleteOrdenCompra();
  }

  public function send_deleteOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $args = new \Inventario_deleteOrdenCompra_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteOrdenCompra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteOrdenCompra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteOrdenCompra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteOrdenCompra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteOrdenCompra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteOrdenCompra failed: unknown result");
  }

  public function updateOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $this->send_updateOrdenCompra($busqueda, $orden);
    return $this->recv_updateOrdenCompra();
  }

  public function send_updateOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $args = new \Inventario_updateOrdenCompra_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateOrdenCompra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateOrdenCompra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateOrdenCompra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateOrdenCompra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateOrdenCompra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateOrdenCompra failed: unknown result");
  }

  public function updateEstadoOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $this->send_updateEstadoOrdenCompra($busqueda, $orden);
    return $this->recv_updateEstadoOrdenCompra();
  }

  public function send_updateEstadoOrdenCompra(\Busqueda $busqueda, \OrdenCompra $orden)
  {
    $args = new \Inventario_updateEstadoOrdenCompra_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoOrdenCompra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoOrdenCompra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoOrdenCompra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoOrdenCompra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoOrdenCompra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoOrdenCompra failed: unknown result");
  }

  public function deleteOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden)
  {
    $this->send_deleteOrdenCompra_item($busqueda, $orden);
    return $this->recv_deleteOrdenCompra_item();
  }

  public function send_deleteOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden)
  {
    $args = new \Inventario_deleteOrdenCompra_item_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteOrdenCompra_item', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteOrdenCompra_item', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteOrdenCompra_item()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteOrdenCompra_item_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteOrdenCompra_item_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteOrdenCompra_item failed: unknown result");
  }

  public function insertOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden)
  {
    $this->send_insertOrdenCompra_item($busqueda, $orden);
    return $this->recv_insertOrdenCompra_item();
  }

  public function send_insertOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden)
  {
    $args = new \Inventario_insertOrdenCompra_item_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertOrdenCompra_item', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertOrdenCompra_item', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertOrdenCompra_item()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertOrdenCompra_item_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertOrdenCompra_item_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertOrdenCompra_item failed: unknown result");
  }

  public function updateOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden)
  {
    $this->send_updateOrdenCompra_item($busqueda, $orden);
    return $this->recv_updateOrdenCompra_item();
  }

  public function send_updateOrdenCompra_item(\Busqueda $busqueda, \OrdenCompraItem $orden)
  {
    $args = new \Inventario_updateOrdenCompra_item_args();
    $args->busqueda = $busqueda;
    $args->orden = $orden;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateOrdenCompra_item', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateOrdenCompra_item', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateOrdenCompra_item()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateOrdenCompra_item_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateOrdenCompra_item_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateOrdenCompra_item failed: unknown result");
  }

  public function getProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $this->send_getProveedor($busqueda, $proveedor);
    return $this->recv_getProveedor();
  }

  public function send_getProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $args = new \Inventario_getProveedor_args();
    $args->busqueda = $busqueda;
    $args->proveedor = $proveedor;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getProveedor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getProveedor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getProveedor()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getProveedor_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getProveedor_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getProveedor failed: unknown result");
  }

  public function getAllProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $this->send_getAllProveedor($busqueda, $proveedor);
    return $this->recv_getAllProveedor();
  }

  public function send_getAllProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $args = new \Inventario_getAllProveedor_args();
    $args->busqueda = $busqueda;
    $args->proveedor = $proveedor;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllProveedor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllProveedor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllProveedor()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllProveedor_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllProveedor_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllProveedor failed: unknown result");
  }

  public function updateEstadoProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $this->send_updateEstadoProveedor($busqueda, $proveedor);
    return $this->recv_updateEstadoProveedor();
  }

  public function send_updateEstadoProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $args = new \Inventario_updateEstadoProveedor_args();
    $args->busqueda = $busqueda;
    $args->proveedor = $proveedor;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoProveedor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoProveedor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoProveedor()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoProveedor_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoProveedor_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoProveedor failed: unknown result");
  }

  public function updateProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $this->send_updateProveedor($busqueda, $proveedor);
    return $this->recv_updateProveedor();
  }

  public function send_updateProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $args = new \Inventario_updateProveedor_args();
    $args->busqueda = $busqueda;
    $args->proveedor = $proveedor;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateProveedor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateProveedor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateProveedor()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateProveedor_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateProveedor_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateProveedor failed: unknown result");
  }

  public function insertProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $this->send_insertProveedor($busqueda, $proveedor);
    return $this->recv_insertProveedor();
  }

  public function send_insertProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $args = new \Inventario_insertProveedor_args();
    $args->busqueda = $busqueda;
    $args->proveedor = $proveedor;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertProveedor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertProveedor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertProveedor()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertProveedor_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertProveedor_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertProveedor failed: unknown result");
  }

  public function deleteProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $this->send_deleteProveedor($busqueda, $proveedor);
    return $this->recv_deleteProveedor();
  }

  public function send_deleteProveedor(\Busqueda $busqueda, \Proveedor $proveedor)
  {
    $args = new \Inventario_deleteProveedor_args();
    $args->busqueda = $busqueda;
    $args->proveedor = $proveedor;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteProveedor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteProveedor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteProveedor()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteProveedor_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteProveedor_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteProveedor failed: unknown result");
  }

  public function getTarjeta(\Busqueda $busqueda, \Tarjeta $objeto)
  {
    $this->send_getTarjeta($busqueda, $objeto);
    return $this->recv_getTarjeta();
  }

  public function send_getTarjeta(\Busqueda $busqueda, \Tarjeta $objeto)
  {
    $args = new \Inventario_getTarjeta_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTarjeta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTarjeta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTarjeta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getTarjeta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getTarjeta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getTarjeta failed: unknown result");
  }

  public function getAllTarjeta(\Busqueda $busqueda, \Tarjeta $objeto)
  {
    $this->send_getAllTarjeta($busqueda, $objeto);
    return $this->recv_getAllTarjeta();
  }

  public function send_getAllTarjeta(\Busqueda $busqueda, \Tarjeta $objeto)
  {
    $args = new \Inventario_getAllTarjeta_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllTarjeta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllTarjeta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllTarjeta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllTarjeta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllTarjeta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllTarjeta failed: unknown result");
  }

  public function getBanco(\Busqueda $busqueda, \Banco $objeto)
  {
    $this->send_getBanco($busqueda, $objeto);
    return $this->recv_getBanco();
  }

  public function send_getBanco(\Busqueda $busqueda, \Banco $objeto)
  {
    $args = new \Inventario_getBanco_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBanco', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBanco', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBanco()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getBanco_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getBanco_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBanco failed: unknown result");
  }

  public function getAllBanco(\Busqueda $busqueda, \Banco $objeto)
  {
    $this->send_getAllBanco($busqueda, $objeto);
    return $this->recv_getAllBanco();
  }

  public function send_getAllBanco(\Busqueda $busqueda, \Banco $objeto)
  {
    $args = new \Inventario_getAllBanco_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllBanco', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllBanco', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllBanco()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllBanco_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllBanco_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllBanco failed: unknown result");
  }

  public function getCompraTarjeta(\Busqueda $busqueda, \CompraTarjeta $objeto)
  {
    $this->send_getCompraTarjeta($busqueda, $objeto);
    return $this->recv_getCompraTarjeta();
  }

  public function send_getCompraTarjeta(\Busqueda $busqueda, \CompraTarjeta $objeto)
  {
    $args = new \Inventario_getCompraTarjeta_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCompraTarjeta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCompraTarjeta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCompraTarjeta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getCompraTarjeta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getCompraTarjeta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCompraTarjeta failed: unknown result");
  }

  public function getAllCompraTarjeta_compra(\Busqueda $busqueda, \CompraTarjeta $objeto)
  {
    $this->send_getAllCompraTarjeta_compra($busqueda, $objeto);
    return $this->recv_getAllCompraTarjeta_compra();
  }

  public function send_getAllCompraTarjeta_compra(\Busqueda $busqueda, \CompraTarjeta $objeto)
  {
    $args = new \Inventario_getAllCompraTarjeta_compra_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllCompraTarjeta_compra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllCompraTarjeta_compra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllCompraTarjeta_compra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllCompraTarjeta_compra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllCompraTarjeta_compra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllCompraTarjeta_compra failed: unknown result");
  }

  public function deleteCompraTarjeta(\Busqueda $busqueda, \CompraTarjeta $objeto)
  {
    $this->send_deleteCompraTarjeta($busqueda, $objeto);
    return $this->recv_deleteCompraTarjeta();
  }

  public function send_deleteCompraTarjeta(\Busqueda $busqueda, \CompraTarjeta $objeto)
  {
    $args = new \Inventario_deleteCompraTarjeta_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteCompraTarjeta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteCompraTarjeta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteCompraTarjeta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteCompraTarjeta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteCompraTarjeta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteCompraTarjeta failed: unknown result");
  }

  public function insertCompraTarjeta(\Busqueda $busqueda, \CompraTarjeta $objeto)
  {
    $this->send_insertCompraTarjeta($busqueda, $objeto);
    return $this->recv_insertCompraTarjeta();
  }

  public function send_insertCompraTarjeta(\Busqueda $busqueda, \CompraTarjeta $objeto)
  {
    $args = new \Inventario_insertCompraTarjeta_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertCompraTarjeta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertCompraTarjeta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertCompraTarjeta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertCompraTarjeta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertCompraTarjeta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertCompraTarjeta failed: unknown result");
  }

  public function getFacturacion(\Busqueda $busqueda, \Facturacion $objeto)
  {
    $this->send_getFacturacion($busqueda, $objeto);
    return $this->recv_getFacturacion();
  }

  public function send_getFacturacion(\Busqueda $busqueda, \Facturacion $objeto)
  {
    $args = new \Inventario_getFacturacion_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFacturacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFacturacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFacturacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getFacturacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getFacturacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getFacturacion failed: unknown result");
  }

  public function getAllFacturacion_usuario(\Busqueda $busqueda, \Facturacion $objeto)
  {
    $this->send_getAllFacturacion_usuario($busqueda, $objeto);
    return $this->recv_getAllFacturacion_usuario();
  }

  public function send_getAllFacturacion_usuario(\Busqueda $busqueda, \Facturacion $objeto)
  {
    $args = new \Inventario_getAllFacturacion_usuario_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllFacturacion_usuario', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllFacturacion_usuario', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllFacturacion_usuario()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllFacturacion_usuario_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllFacturacion_usuario_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllFacturacion_usuario failed: unknown result");
  }

  public function updateFacturacion(\Busqueda $busqueda, \Facturacion $objeto)
  {
    $this->send_updateFacturacion($busqueda, $objeto);
    return $this->recv_updateFacturacion();
  }

  public function send_updateFacturacion(\Busqueda $busqueda, \Facturacion $objeto)
  {
    $args = new \Inventario_updateFacturacion_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateFacturacion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateFacturacion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateFacturacion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateFacturacion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateFacturacion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateFacturacion failed: unknown result");
  }

  public function getCompra(\Busqueda $busqueda, \Compra $objeto)
  {
    $this->send_getCompra($busqueda, $objeto);
    return $this->recv_getCompra();
  }

  public function send_getCompra(\Busqueda $busqueda, \Compra $objeto)
  {
    $args = new \Inventario_getCompra_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCompra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCompra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCompra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getCompra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getCompra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCompra failed: unknown result");
  }

  public function getAllCompra(\Busqueda $busqueda, \Compra $objeto)
  {
    $this->send_getAllCompra($busqueda, $objeto);
    return $this->recv_getAllCompra();
  }

  public function send_getAllCompra(\Busqueda $busqueda, \Compra $objeto)
  {
    $args = new \Inventario_getAllCompra_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllCompra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllCompra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllCompra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllCompra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllCompra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllCompra failed: unknown result");
  }

  public function updateCompra(\Busqueda $busqueda, \Compra $objeto)
  {
    $this->send_updateCompra($busqueda, $objeto);
    return $this->recv_updateCompra();
  }

  public function send_updateCompra(\Busqueda $busqueda, \Compra $objeto)
  {
    $args = new \Inventario_updateCompra_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateCompra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateCompra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateCompra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateCompra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateCompra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateCompra failed: unknown result");
  }

  public function insertCompra(\Busqueda $busqueda, \Compra $objeto)
  {
    $this->send_insertCompra($busqueda, $objeto);
    return $this->recv_insertCompra();
  }

  public function send_insertCompra(\Busqueda $busqueda, \Compra $objeto)
  {
    $args = new \Inventario_insertCompra_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertCompra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertCompra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertCompra()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertCompra_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertCompra_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertCompra failed: unknown result");
  }

  public function getPrecuenta(\Busqueda $busqueda, \Precuenta $objeto)
  {
    $this->send_getPrecuenta($busqueda, $objeto);
    return $this->recv_getPrecuenta();
  }

  public function send_getPrecuenta(\Busqueda $busqueda, \Precuenta $objeto)
  {
    $args = new \Inventario_getPrecuenta_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPrecuenta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPrecuenta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPrecuenta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getPrecuenta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getPrecuenta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPrecuenta failed: unknown result");
  }

  public function getAllPrecuenta(\Busqueda $busqueda, \Precuenta $objeto)
  {
    $this->send_getAllPrecuenta($busqueda, $objeto);
    return $this->recv_getAllPrecuenta();
  }

  public function send_getAllPrecuenta(\Busqueda $busqueda, \Precuenta $objeto)
  {
    $args = new \Inventario_getAllPrecuenta_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllPrecuenta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllPrecuenta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllPrecuenta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllPrecuenta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllPrecuenta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllPrecuenta failed: unknown result");
  }

  public function updateEstadoPrecuenta(\Busqueda $busqueda, \Precuenta $objeto)
  {
    $this->send_updateEstadoPrecuenta($busqueda, $objeto);
    return $this->recv_updateEstadoPrecuenta();
  }

  public function send_updateEstadoPrecuenta(\Busqueda $busqueda, \Precuenta $objeto)
  {
    $args = new \Inventario_updateEstadoPrecuenta_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoPrecuenta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoPrecuenta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoPrecuenta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoPrecuenta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoPrecuenta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoPrecuenta failed: unknown result");
  }

  public function updatePrecuenta(\Busqueda $busqueda, \Precuenta $objeto)
  {
    $this->send_updatePrecuenta($busqueda, $objeto);
    return $this->recv_updatePrecuenta();
  }

  public function send_updatePrecuenta(\Busqueda $busqueda, \Precuenta $objeto)
  {
    $args = new \Inventario_updatePrecuenta_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePrecuenta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePrecuenta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePrecuenta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updatePrecuenta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updatePrecuenta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePrecuenta failed: unknown result");
  }

  public function insertPrecuenta(\Busqueda $busqueda, \Precuenta $objeto)
  {
    $this->send_insertPrecuenta($busqueda, $objeto);
    return $this->recv_insertPrecuenta();
  }

  public function send_insertPrecuenta(\Busqueda $busqueda, \Precuenta $objeto)
  {
    $args = new \Inventario_insertPrecuenta_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertPrecuenta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertPrecuenta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertPrecuenta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertPrecuenta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertPrecuenta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertPrecuenta failed: unknown result");
  }

  public function deletePrecuenta(\Busqueda $busqueda, \Precuenta $objeto)
  {
    $this->send_deletePrecuenta($busqueda, $objeto);
    return $this->recv_deletePrecuenta();
  }

  public function send_deletePrecuenta(\Busqueda $busqueda, \Precuenta $objeto)
  {
    $args = new \Inventario_deletePrecuenta_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deletePrecuenta', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deletePrecuenta', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deletePrecuenta()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deletePrecuenta_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deletePrecuenta_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deletePrecuenta failed: unknown result");
  }

  public function getReserva(\Busqueda $busqueda, \Reserva $objeto)
  {
    $this->send_getReserva($busqueda, $objeto);
    return $this->recv_getReserva();
  }

  public function send_getReserva(\Busqueda $busqueda, \Reserva $objeto)
  {
    $args = new \Inventario_getReserva_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getReserva', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getReserva', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getReserva()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getReserva_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getReserva_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getReserva failed: unknown result");
  }

  public function getAllReserva(\Busqueda $busqueda, \Reserva $objeto)
  {
    $this->send_getAllReserva($busqueda, $objeto);
    return $this->recv_getAllReserva();
  }

  public function send_getAllReserva(\Busqueda $busqueda, \Reserva $objeto)
  {
    $args = new \Inventario_getAllReserva_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllReserva', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllReserva', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllReserva()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllReserva_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllReserva_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllReserva failed: unknown result");
  }

  public function updateEstadoReserva(\Busqueda $busqueda, \Reserva $objeto)
  {
    $this->send_updateEstadoReserva($busqueda, $objeto);
    return $this->recv_updateEstadoReserva();
  }

  public function send_updateEstadoReserva(\Busqueda $busqueda, \Reserva $objeto)
  {
    $args = new \Inventario_updateEstadoReserva_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoReserva', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoReserva', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoReserva()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoReserva_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoReserva_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoReserva failed: unknown result");
  }

  public function updateReserva(\Busqueda $busqueda, \Reserva $objeto)
  {
    $this->send_updateReserva($busqueda, $objeto);
    return $this->recv_updateReserva();
  }

  public function send_updateReserva(\Busqueda $busqueda, \Reserva $objeto)
  {
    $args = new \Inventario_updateReserva_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateReserva', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateReserva', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateReserva()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateReserva_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateReserva_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateReserva failed: unknown result");
  }

  public function insertReserva(\Busqueda $busqueda, \Reserva $objeto)
  {
    $this->send_insertReserva($busqueda, $objeto);
    return $this->recv_insertReserva();
  }

  public function send_insertReserva(\Busqueda $busqueda, \Reserva $objeto)
  {
    $args = new \Inventario_insertReserva_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertReserva', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertReserva', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertReserva()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertReserva_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertReserva_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertReserva failed: unknown result");
  }

  public function deleteReserva(\Busqueda $busqueda, \Reserva $objeto)
  {
    $this->send_deleteReserva($busqueda, $objeto);
    return $this->recv_deleteReserva();
  }

  public function send_deleteReserva(\Busqueda $busqueda, \Reserva $objeto)
  {
    $args = new \Inventario_deleteReserva_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteReserva', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteReserva', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteReserva()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deleteReserva_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deleteReserva_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteReserva failed: unknown result");
  }

  public function getPedido(\Busqueda $busqueda, \Pedido $objeto)
  {
    $this->send_getPedido($busqueda, $objeto);
    return $this->recv_getPedido();
  }

  public function send_getPedido(\Busqueda $busqueda, \Pedido $objeto)
  {
    $args = new \Inventario_getPedido_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPedido', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPedido', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPedido()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getPedido_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getPedido_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPedido failed: unknown result");
  }

  public function getAllPedido(\Busqueda $busqueda, \Pedido $objeto)
  {
    $this->send_getAllPedido($busqueda, $objeto);
    return $this->recv_getAllPedido();
  }

  public function send_getAllPedido(\Busqueda $busqueda, \Pedido $objeto)
  {
    $args = new \Inventario_getAllPedido_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllPedido', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllPedido', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllPedido()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllPedido_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllPedido_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllPedido failed: unknown result");
  }

  public function updateEstadoPedido(\Busqueda $busqueda, \Pedido $objeto)
  {
    $this->send_updateEstadoPedido($busqueda, $objeto);
    return $this->recv_updateEstadoPedido();
  }

  public function send_updateEstadoPedido(\Busqueda $busqueda, \Pedido $objeto)
  {
    $args = new \Inventario_updateEstadoPedido_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoPedido', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoPedido', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoPedido()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoPedido_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoPedido_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoPedido failed: unknown result");
  }

  public function updatePedido(\Busqueda $busqueda, \Pedido $objeto)
  {
    $this->send_updatePedido($busqueda, $objeto);
    return $this->recv_updatePedido();
  }

  public function send_updatePedido(\Busqueda $busqueda, \Pedido $objeto)
  {
    $args = new \Inventario_updatePedido_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePedido', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePedido', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePedido()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updatePedido_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updatePedido_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePedido failed: unknown result");
  }

  public function insertPedido(\Busqueda $busqueda, \Pedido $objeto)
  {
    $this->send_insertPedido($busqueda, $objeto);
    return $this->recv_insertPedido();
  }

  public function send_insertPedido(\Busqueda $busqueda, \Pedido $objeto)
  {
    $args = new \Inventario_insertPedido_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertPedido', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertPedido', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertPedido()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertPedido_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertPedido_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertPedido failed: unknown result");
  }

  public function deletePedido(\Busqueda $busqueda, \Pedido $objeto)
  {
    $this->send_deletePedido($busqueda, $objeto);
    return $this->recv_deletePedido();
  }

  public function send_deletePedido(\Busqueda $busqueda, \Pedido $objeto)
  {
    $args = new \Inventario_deletePedido_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deletePedido', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deletePedido', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deletePedido()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deletePedido_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deletePedido_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deletePedido failed: unknown result");
  }

  public function getPedidoIC(\Busqueda $busqueda, \PedidoIC $objeto)
  {
    $this->send_getPedidoIC($busqueda, $objeto);
    return $this->recv_getPedidoIC();
  }

  public function send_getPedidoIC(\Busqueda $busqueda, \PedidoIC $objeto)
  {
    $args = new \Inventario_getPedidoIC_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPedidoIC', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPedidoIC', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPedidoIC()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getPedidoIC_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getPedidoIC_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPedidoIC failed: unknown result");
  }

  public function getAllPedidoIC(\Busqueda $busqueda, \PedidoIC $objeto)
  {
    $this->send_getAllPedidoIC($busqueda, $objeto);
    return $this->recv_getAllPedidoIC();
  }

  public function send_getAllPedidoIC(\Busqueda $busqueda, \PedidoIC $objeto)
  {
    $args = new \Inventario_getAllPedidoIC_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllPedidoIC', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllPedidoIC', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllPedidoIC()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_getAllPedidoIC_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_getAllPedidoIC_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllPedidoIC failed: unknown result");
  }

  public function updateEstadoPedidoIC(\Busqueda $busqueda, \PedidoIC $objeto)
  {
    $this->send_updateEstadoPedidoIC($busqueda, $objeto);
    return $this->recv_updateEstadoPedidoIC();
  }

  public function send_updateEstadoPedidoIC(\Busqueda $busqueda, \PedidoIC $objeto)
  {
    $args = new \Inventario_updateEstadoPedidoIC_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEstadoPedidoIC', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEstadoPedidoIC', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEstadoPedidoIC()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updateEstadoPedidoIC_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updateEstadoPedidoIC_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateEstadoPedidoIC failed: unknown result");
  }

  public function updatePedidoIC(\Busqueda $busqueda, \PedidoIC $objeto)
  {
    $this->send_updatePedidoIC($busqueda, $objeto);
    return $this->recv_updatePedidoIC();
  }

  public function send_updatePedidoIC(\Busqueda $busqueda, \PedidoIC $objeto)
  {
    $args = new \Inventario_updatePedidoIC_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePedidoIC', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePedidoIC', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePedidoIC()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_updatePedidoIC_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_updatePedidoIC_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePedidoIC failed: unknown result");
  }

  public function insertPedidoIC(\Busqueda $busqueda, \PedidoIC $objeto)
  {
    $this->send_insertPedidoIC($busqueda, $objeto);
    return $this->recv_insertPedidoIC();
  }

  public function send_insertPedidoIC(\Busqueda $busqueda, \PedidoIC $objeto)
  {
    $args = new \Inventario_insertPedidoIC_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertPedidoIC', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertPedidoIC', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertPedidoIC()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_insertPedidoIC_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_insertPedidoIC_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("insertPedidoIC failed: unknown result");
  }

  public function deletePedidoIC(\Busqueda $busqueda, \PedidoIC $objeto)
  {
    $this->send_deletePedidoIC($busqueda, $objeto);
    return $this->recv_deletePedidoIC();
  }

  public function send_deletePedidoIC(\Busqueda $busqueda, \PedidoIC $objeto)
  {
    $args = new \Inventario_deletePedidoIC_args();
    $args->busqueda = $busqueda;
    $args->objeto = $objeto;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deletePedidoIC', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deletePedidoIC', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deletePedidoIC()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Inventario_deletePedidoIC_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Inventario_deletePedidoIC_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deletePedidoIC failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class Inventario_getItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'item',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Item',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Item
   */
  public $item = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['item'])) {
        $this->item = $vals['item'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->item = new \Item();
            $xfer += $this->item->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item !== null) {
      if (!is_object($this->item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item', TType::STRUCT, 2);
      $xfer += $this->item->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Item',
      ),
    );

  /**
   * @var \Item
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Item();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getItem_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'item',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Item',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Item
   */
  public $item = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['item'])) {
        $this->item = $vals['item'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->item = new \Item();
            $xfer += $this->item->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item !== null) {
      if (!is_object($this->item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item', TType::STRUCT, 2);
      $xfer += $this->item->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Item',
        ),
      ),
    );

  /**
   * @var \Item[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $elem54 = new \Item();
              $xfer += $elem54->read($input);
              $this->success []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllItem_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter55)
          {
            $xfer += $iter55->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'item',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Item',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Item
   */
  public $item = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['item'])) {
        $this->item = $vals['item'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->item = new \Item();
            $xfer += $this->item->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item !== null) {
      if (!is_object($this->item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item', TType::STRUCT, 2);
      $xfer += $this->item->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoItem_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'item',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Item',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Item
   */
  public $item = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['item'])) {
        $this->item = $vals['item'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->item = new \Item();
            $xfer += $this->item->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item !== null) {
      if (!is_object($this->item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item', TType::STRUCT, 2);
      $xfer += $this->item->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateItem_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'item',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Item',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Item
   */
  public $item = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['item'])) {
        $this->item = $vals['item'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->item = new \Item();
            $xfer += $this->item->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item !== null) {
      if (!is_object($this->item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item', TType::STRUCT, 2);
      $xfer += $this->item->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertItem_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'item',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Item',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Item
   */
  public $item = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['item'])) {
        $this->item = $vals['item'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->item = new \Item();
            $xfer += $this->item->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item !== null) {
      if (!is_object($this->item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item', TType::STRUCT, 2);
      $xfer += $this->item->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteItem_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getGrupo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'grupo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Grupo',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Grupo
   */
  public $grupo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['grupo'])) {
        $this->grupo = $vals['grupo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getGrupo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->grupo = new \Grupo();
            $xfer += $this->grupo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getGrupo_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grupo !== null) {
      if (!is_object($this->grupo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('grupo', TType::STRUCT, 2);
      $xfer += $this->grupo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getGrupo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Grupo',
      ),
    );

  /**
   * @var \Grupo
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getGrupo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Grupo();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getGrupo_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllGrupo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'grupo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Grupo',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Grupo
   */
  public $grupo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['grupo'])) {
        $this->grupo = $vals['grupo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllGrupo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->grupo = new \Grupo();
            $xfer += $this->grupo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllGrupo_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grupo !== null) {
      if (!is_object($this->grupo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('grupo', TType::STRUCT, 2);
      $xfer += $this->grupo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllGrupo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Grupo',
        ),
      ),
    );

  /**
   * @var \Grupo[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllGrupo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readListBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $elem61 = new \Grupo();
              $xfer += $elem61->read($input);
              $this->success []= $elem61;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllGrupo_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter62)
          {
            $xfer += $iter62->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoGrupo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'grupo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Grupo',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Grupo
   */
  public $grupo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['grupo'])) {
        $this->grupo = $vals['grupo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoGrupo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->grupo = new \Grupo();
            $xfer += $this->grupo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoGrupo_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grupo !== null) {
      if (!is_object($this->grupo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('grupo', TType::STRUCT, 2);
      $xfer += $this->grupo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoGrupo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoGrupo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoGrupo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateGrupo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'grupo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Grupo',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Grupo
   */
  public $grupo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['grupo'])) {
        $this->grupo = $vals['grupo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateGrupo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->grupo = new \Grupo();
            $xfer += $this->grupo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateGrupo_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grupo !== null) {
      if (!is_object($this->grupo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('grupo', TType::STRUCT, 2);
      $xfer += $this->grupo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateGrupo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateGrupo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateGrupo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertGrupo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'grupo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Grupo',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Grupo
   */
  public $grupo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['grupo'])) {
        $this->grupo = $vals['grupo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertGrupo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->grupo = new \Grupo();
            $xfer += $this->grupo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertGrupo_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grupo !== null) {
      if (!is_object($this->grupo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('grupo', TType::STRUCT, 2);
      $xfer += $this->grupo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertGrupo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertGrupo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertGrupo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteGrupo_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'grupo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Grupo',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Grupo
   */
  public $grupo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['grupo'])) {
        $this->grupo = $vals['grupo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteGrupo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->grupo = new \Grupo();
            $xfer += $this->grupo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteGrupo_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grupo !== null) {
      if (!is_object($this->grupo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('grupo', TType::STRUCT, 2);
      $xfer += $this->grupo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteGrupo_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteGrupo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteGrupo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getCompuesto_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compuesto',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Compuesto
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getCompuesto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \Compuesto();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getCompuesto_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getCompuesto_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compuesto',
      ),
    );

  /**
   * @var \Compuesto
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getCompuesto_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Compuesto();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getCompuesto_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllCompuesto_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compuesto',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Compuesto
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllCompuesto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \Compuesto();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllCompuesto_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllCompuesto_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Compuesto',
        ),
      ),
    );

  /**
   * @var \Compuesto[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllCompuesto_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $elem68 = new \Compuesto();
              $xfer += $elem68->read($input);
              $this->success []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllCompuesto_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter69)
          {
            $xfer += $iter69->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoCompuesto_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compuesto',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Compuesto
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoCompuesto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \Compuesto();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoCompuesto_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoCompuesto_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoCompuesto_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoCompuesto_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateCompuesto_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compuesto',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Compuesto
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateCompuesto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \Compuesto();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateCompuesto_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateCompuesto_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateCompuesto_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateCompuesto_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertCompuesto_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compuesto',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Compuesto
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertCompuesto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \Compuesto();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertCompuesto_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertCompuesto_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertCompuesto_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertCompuesto_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteCompuesto_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compuesto',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Compuesto
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteCompuesto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \Compuesto();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteCompuesto_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteCompuesto_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteCompuesto_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteCompuesto_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getCompuestoItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompuestoItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \CompuestoItem
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getCompuestoItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \CompuestoItem();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getCompuestoItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getCompuestoItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompuestoItem',
      ),
    );

  /**
   * @var \CompuestoItem
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getCompuestoItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CompuestoItem();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getCompuestoItem_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllCompuestoItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompuestoItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \CompuestoItem
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllCompuestoItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \CompuestoItem();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllCompuestoItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllCompuestoItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\CompuestoItem',
        ),
      ),
    );

  /**
   * @var \CompuestoItem[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllCompuestoItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size70 = 0;
            $_etype73 = 0;
            $xfer += $input->readListBegin($_etype73, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $elem75 = null;
              $elem75 = new \CompuestoItem();
              $xfer += $elem75->read($input);
              $this->success []= $elem75;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllCompuestoItem_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter76)
          {
            $xfer += $iter76->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoCompuestoItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompuestoItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \CompuestoItem
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoCompuestoItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \CompuestoItem();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoCompuestoItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoCompuestoItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoCompuestoItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoCompuestoItem_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateCompuestoItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompuestoItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \CompuestoItem
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateCompuestoItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \CompuestoItem();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateCompuestoItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateCompuestoItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateCompuestoItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateCompuestoItem_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertCompuestoItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompuestoItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \CompuestoItem
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertCompuestoItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \CompuestoItem();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertCompuestoItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertCompuestoItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertCompuestoItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertCompuestoItem_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteCompuestoItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'compuesto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompuestoItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \CompuestoItem
   */
  public $compuesto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['compuesto'])) {
        $this->compuesto = $vals['compuesto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteCompuestoItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->compuesto = new \CompuestoItem();
            $xfer += $this->compuesto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteCompuestoItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compuesto !== null) {
      if (!is_object($this->compuesto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('compuesto', TType::STRUCT, 2);
      $xfer += $this->compuesto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteCompuestoItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteCompuestoItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteCompuestoItem_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getPromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'promo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Promocion',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Promocion
   */
  public $promo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['promo'])) {
        $this->promo = $vals['promo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getPromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->promo = new \Promocion();
            $xfer += $this->promo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getPromocion_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promo !== null) {
      if (!is_object($this->promo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promo', TType::STRUCT, 2);
      $xfer += $this->promo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getPromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Promocion',
      ),
    );

  /**
   * @var \Promocion
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getPromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Promocion();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getPromocion_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllPromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'promo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Promocion',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Promocion
   */
  public $promo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['promo'])) {
        $this->promo = $vals['promo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllPromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->promo = new \Promocion();
            $xfer += $this->promo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllPromocion_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promo !== null) {
      if (!is_object($this->promo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promo', TType::STRUCT, 2);
      $xfer += $this->promo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllPromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Promocion',
        ),
      ),
    );

  /**
   * @var \Promocion[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllPromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size77 = 0;
            $_etype80 = 0;
            $xfer += $input->readListBegin($_etype80, $_size77);
            for ($_i81 = 0; $_i81 < $_size77; ++$_i81)
            {
              $elem82 = null;
              $elem82 = new \Promocion();
              $xfer += $elem82->read($input);
              $this->success []= $elem82;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllPromocion_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter83)
          {
            $xfer += $iter83->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoPromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'promo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Promocion',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Promocion
   */
  public $promo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['promo'])) {
        $this->promo = $vals['promo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoPromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->promo = new \Promocion();
            $xfer += $this->promo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoPromocion_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promo !== null) {
      if (!is_object($this->promo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promo', TType::STRUCT, 2);
      $xfer += $this->promo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoPromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoPromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoPromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updatePromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'promo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Promocion',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Promocion
   */
  public $promo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['promo'])) {
        $this->promo = $vals['promo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updatePromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->promo = new \Promocion();
            $xfer += $this->promo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updatePromocion_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promo !== null) {
      if (!is_object($this->promo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promo', TType::STRUCT, 2);
      $xfer += $this->promo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updatePromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updatePromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updatePromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertPromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'promo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Promocion',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Promocion
   */
  public $promo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['promo'])) {
        $this->promo = $vals['promo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertPromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->promo = new \Promocion();
            $xfer += $this->promo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertPromocion_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promo !== null) {
      if (!is_object($this->promo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promo', TType::STRUCT, 2);
      $xfer += $this->promo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertPromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertPromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertPromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deletePromocion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'promo',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Promocion',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Promocion
   */
  public $promo = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['promo'])) {
        $this->promo = $vals['promo'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deletePromocion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->promo = new \Promocion();
            $xfer += $this->promo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deletePromocion_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promo !== null) {
      if (!is_object($this->promo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promo', TType::STRUCT, 2);
      $xfer += $this->promo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deletePromocion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deletePromocion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deletePromocion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getIngreso_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'ingreso',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Ingreso',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Ingreso
   */
  public $ingreso = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['ingreso'])) {
        $this->ingreso = $vals['ingreso'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getIngreso_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ingreso = new \Ingreso();
            $xfer += $this->ingreso->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getIngreso_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ingreso !== null) {
      if (!is_object($this->ingreso)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ingreso', TType::STRUCT, 2);
      $xfer += $this->ingreso->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getIngreso_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Ingreso',
      ),
    );

  /**
   * @var \Ingreso
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getIngreso_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Ingreso();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getIngreso_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllIngreso_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'ingreso',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Ingreso',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Ingreso
   */
  public $ingreso = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['ingreso'])) {
        $this->ingreso = $vals['ingreso'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllIngreso_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ingreso = new \Ingreso();
            $xfer += $this->ingreso->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllIngreso_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ingreso !== null) {
      if (!is_object($this->ingreso)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ingreso', TType::STRUCT, 2);
      $xfer += $this->ingreso->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllIngreso_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Ingreso',
        ),
      ),
    );

  /**
   * @var \Ingreso[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllIngreso_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size84 = 0;
            $_etype87 = 0;
            $xfer += $input->readListBegin($_etype87, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $elem89 = null;
              $elem89 = new \Ingreso();
              $xfer += $elem89->read($input);
              $this->success []= $elem89;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllIngreso_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter90)
          {
            $xfer += $iter90->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertIngreso_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'ingreso',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Ingreso',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Ingreso
   */
  public $ingreso = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['ingreso'])) {
        $this->ingreso = $vals['ingreso'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertIngreso_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ingreso = new \Ingreso();
            $xfer += $this->ingreso->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertIngreso_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ingreso !== null) {
      if (!is_object($this->ingreso)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ingreso', TType::STRUCT, 2);
      $xfer += $this->ingreso->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertIngreso_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertIngreso_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertIngreso_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteIngreso_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'ingreso',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Ingreso',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Ingreso
   */
  public $ingreso = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['ingreso'])) {
        $this->ingreso = $vals['ingreso'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteIngreso_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ingreso = new \Ingreso();
            $xfer += $this->ingreso->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteIngreso_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ingreso !== null) {
      if (!is_object($this->ingreso)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ingreso', TType::STRUCT, 2);
      $xfer += $this->ingreso->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteIngreso_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteIngreso_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteIngreso_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getOrdenCompra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompra',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompra
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getOrdenCompra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompra();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getOrdenCompra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getOrdenCompra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompra',
      ),
    );

  /**
   * @var \OrdenCompra
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getOrdenCompra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \OrdenCompra();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getOrdenCompra_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getOrdenCompraItem_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompraItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompraItem
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getOrdenCompraItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompraItem();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getOrdenCompraItem_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getOrdenCompraItem_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompraItem',
      ),
    );

  /**
   * @var \OrdenCompraItem
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getOrdenCompraItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \OrdenCompraItem();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getOrdenCompraItem_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllOrdenCompra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompra',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompra
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllOrdenCompra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompra();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllOrdenCompra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllOrdenCompra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\OrdenCompra',
        ),
      ),
    );

  /**
   * @var \OrdenCompra[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllOrdenCompra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size91 = 0;
            $_etype94 = 0;
            $xfer += $input->readListBegin($_etype94, $_size91);
            for ($_i95 = 0; $_i95 < $_size91; ++$_i95)
            {
              $elem96 = null;
              $elem96 = new \OrdenCompra();
              $xfer += $elem96->read($input);
              $this->success []= $elem96;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllOrdenCompra_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter97)
          {
            $xfer += $iter97->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertOrdenCompra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompra',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompra
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertOrdenCompra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompra();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertOrdenCompra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertOrdenCompra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertOrdenCompra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertOrdenCompra_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteOrdenCompra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompra',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompra
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteOrdenCompra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompra();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteOrdenCompra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteOrdenCompra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteOrdenCompra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteOrdenCompra_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateOrdenCompra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompra',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompra
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateOrdenCompra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompra();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateOrdenCompra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateOrdenCompra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateOrdenCompra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateOrdenCompra_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoOrdenCompra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompra',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompra
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoOrdenCompra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompra();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoOrdenCompra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoOrdenCompra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoOrdenCompra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoOrdenCompra_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteOrdenCompra_item_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompraItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompraItem
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteOrdenCompra_item_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompraItem();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteOrdenCompra_item_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteOrdenCompra_item_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteOrdenCompra_item_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteOrdenCompra_item_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertOrdenCompra_item_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompraItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompraItem
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertOrdenCompra_item_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompraItem();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertOrdenCompra_item_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertOrdenCompra_item_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertOrdenCompra_item_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertOrdenCompra_item_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateOrdenCompra_item_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'orden',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\OrdenCompraItem',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \OrdenCompraItem
   */
  public $orden = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['orden'])) {
        $this->orden = $vals['orden'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateOrdenCompra_item_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->orden = new \OrdenCompraItem();
            $xfer += $this->orden->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateOrdenCompra_item_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orden !== null) {
      if (!is_object($this->orden)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orden', TType::STRUCT, 2);
      $xfer += $this->orden->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateOrdenCompra_item_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateOrdenCompra_item_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateOrdenCompra_item_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getProveedor_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'proveedor',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Proveedor',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Proveedor
   */
  public $proveedor = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['proveedor'])) {
        $this->proveedor = $vals['proveedor'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getProveedor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->proveedor = new \Proveedor();
            $xfer += $this->proveedor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getProveedor_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->proveedor !== null) {
      if (!is_object($this->proveedor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('proveedor', TType::STRUCT, 2);
      $xfer += $this->proveedor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getProveedor_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Proveedor',
      ),
    );

  /**
   * @var \Proveedor
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getProveedor_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Proveedor();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getProveedor_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllProveedor_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'proveedor',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Proveedor',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Proveedor
   */
  public $proveedor = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['proveedor'])) {
        $this->proveedor = $vals['proveedor'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllProveedor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->proveedor = new \Proveedor();
            $xfer += $this->proveedor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllProveedor_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->proveedor !== null) {
      if (!is_object($this->proveedor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('proveedor', TType::STRUCT, 2);
      $xfer += $this->proveedor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllProveedor_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Proveedor',
        ),
      ),
    );

  /**
   * @var \Proveedor[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllProveedor_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size98 = 0;
            $_etype101 = 0;
            $xfer += $input->readListBegin($_etype101, $_size98);
            for ($_i102 = 0; $_i102 < $_size98; ++$_i102)
            {
              $elem103 = null;
              $elem103 = new \Proveedor();
              $xfer += $elem103->read($input);
              $this->success []= $elem103;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllProveedor_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter104)
          {
            $xfer += $iter104->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoProveedor_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'proveedor',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Proveedor',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Proveedor
   */
  public $proveedor = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['proveedor'])) {
        $this->proveedor = $vals['proveedor'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoProveedor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->proveedor = new \Proveedor();
            $xfer += $this->proveedor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoProveedor_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->proveedor !== null) {
      if (!is_object($this->proveedor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('proveedor', TType::STRUCT, 2);
      $xfer += $this->proveedor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoProveedor_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoProveedor_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoProveedor_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateProveedor_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'proveedor',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Proveedor',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Proveedor
   */
  public $proveedor = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['proveedor'])) {
        $this->proveedor = $vals['proveedor'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateProveedor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->proveedor = new \Proveedor();
            $xfer += $this->proveedor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateProveedor_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->proveedor !== null) {
      if (!is_object($this->proveedor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('proveedor', TType::STRUCT, 2);
      $xfer += $this->proveedor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateProveedor_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateProveedor_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateProveedor_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertProveedor_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'proveedor',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Proveedor',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Proveedor
   */
  public $proveedor = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['proveedor'])) {
        $this->proveedor = $vals['proveedor'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertProveedor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->proveedor = new \Proveedor();
            $xfer += $this->proveedor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertProveedor_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->proveedor !== null) {
      if (!is_object($this->proveedor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('proveedor', TType::STRUCT, 2);
      $xfer += $this->proveedor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertProveedor_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertProveedor_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertProveedor_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteProveedor_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'proveedor',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Proveedor',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Proveedor
   */
  public $proveedor = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['proveedor'])) {
        $this->proveedor = $vals['proveedor'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteProveedor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->proveedor = new \Proveedor();
            $xfer += $this->proveedor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteProveedor_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->proveedor !== null) {
      if (!is_object($this->proveedor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('proveedor', TType::STRUCT, 2);
      $xfer += $this->proveedor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteProveedor_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteProveedor_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteProveedor_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getTarjeta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Tarjeta',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Tarjeta
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getTarjeta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Tarjeta();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getTarjeta_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getTarjeta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Tarjeta',
      ),
    );

  /**
   * @var \Tarjeta
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getTarjeta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Tarjeta();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getTarjeta_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllTarjeta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Tarjeta',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Tarjeta
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllTarjeta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Tarjeta();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllTarjeta_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllTarjeta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Tarjeta',
        ),
      ),
    );

  /**
   * @var \Tarjeta[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllTarjeta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size105 = 0;
            $_etype108 = 0;
            $xfer += $input->readListBegin($_etype108, $_size105);
            for ($_i109 = 0; $_i109 < $_size105; ++$_i109)
            {
              $elem110 = null;
              $elem110 = new \Tarjeta();
              $xfer += $elem110->read($input);
              $this->success []= $elem110;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllTarjeta_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter111)
          {
            $xfer += $iter111->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getBanco_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Banco',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Banco
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getBanco_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Banco();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getBanco_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getBanco_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Banco',
      ),
    );

  /**
   * @var \Banco
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getBanco_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Banco();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getBanco_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllBanco_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Banco',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Banco
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllBanco_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Banco();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllBanco_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllBanco_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Banco',
        ),
      ),
    );

  /**
   * @var \Banco[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllBanco_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size112 = 0;
            $_etype115 = 0;
            $xfer += $input->readListBegin($_etype115, $_size112);
            for ($_i116 = 0; $_i116 < $_size112; ++$_i116)
            {
              $elem117 = null;
              $elem117 = new \Banco();
              $xfer += $elem117->read($input);
              $this->success []= $elem117;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllBanco_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter118)
          {
            $xfer += $iter118->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getCompraTarjeta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompraTarjeta',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \CompraTarjeta
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getCompraTarjeta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \CompraTarjeta();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getCompraTarjeta_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getCompraTarjeta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompraTarjeta',
      ),
    );

  /**
   * @var \CompraTarjeta
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getCompraTarjeta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CompraTarjeta();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getCompraTarjeta_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllCompraTarjeta_compra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompraTarjeta',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \CompraTarjeta
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllCompraTarjeta_compra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \CompraTarjeta();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllCompraTarjeta_compra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllCompraTarjeta_compra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\CompraTarjeta',
        ),
      ),
    );

  /**
   * @var \CompraTarjeta[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllCompraTarjeta_compra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size119 = 0;
            $_etype122 = 0;
            $xfer += $input->readListBegin($_etype122, $_size119);
            for ($_i123 = 0; $_i123 < $_size119; ++$_i123)
            {
              $elem124 = null;
              $elem124 = new \CompraTarjeta();
              $xfer += $elem124->read($input);
              $this->success []= $elem124;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllCompraTarjeta_compra_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter125)
          {
            $xfer += $iter125->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteCompraTarjeta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompraTarjeta',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \CompraTarjeta
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteCompraTarjeta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \CompraTarjeta();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteCompraTarjeta_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteCompraTarjeta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteCompraTarjeta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteCompraTarjeta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertCompraTarjeta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\CompraTarjeta',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \CompraTarjeta
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertCompraTarjeta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \CompraTarjeta();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertCompraTarjeta_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertCompraTarjeta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertCompraTarjeta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertCompraTarjeta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getFacturacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Facturacion',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Facturacion
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getFacturacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Facturacion();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getFacturacion_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getFacturacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Facturacion',
      ),
    );

  /**
   * @var \Facturacion
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getFacturacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Facturacion();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getFacturacion_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllFacturacion_usuario_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Facturacion',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Facturacion
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllFacturacion_usuario_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Facturacion();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllFacturacion_usuario_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllFacturacion_usuario_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Facturacion',
        ),
      ),
    );

  /**
   * @var \Facturacion[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllFacturacion_usuario_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size126 = 0;
            $_etype129 = 0;
            $xfer += $input->readListBegin($_etype129, $_size126);
            for ($_i130 = 0; $_i130 < $_size126; ++$_i130)
            {
              $elem131 = null;
              $elem131 = new \Facturacion();
              $xfer += $elem131->read($input);
              $this->success []= $elem131;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllFacturacion_usuario_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter132)
          {
            $xfer += $iter132->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateFacturacion_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Facturacion',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Facturacion
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateFacturacion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Facturacion();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateFacturacion_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateFacturacion_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateFacturacion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateFacturacion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getCompra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compra',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Compra
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getCompra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Compra();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getCompra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getCompra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compra',
      ),
    );

  /**
   * @var \Compra
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getCompra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Compra();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getCompra_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllCompra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compra',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Compra
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllCompra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Compra();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllCompra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllCompra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Compra',
        ),
      ),
    );

  /**
   * @var \Compra[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllCompra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size133 = 0;
            $_etype136 = 0;
            $xfer += $input->readListBegin($_etype136, $_size133);
            for ($_i137 = 0; $_i137 < $_size133; ++$_i137)
            {
              $elem138 = null;
              $elem138 = new \Compra();
              $xfer += $elem138->read($input);
              $this->success []= $elem138;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllCompra_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter139)
          {
            $xfer += $iter139->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateCompra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compra',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Compra
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateCompra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Compra();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateCompra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateCompra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateCompra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateCompra_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertCompra_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Compra',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Compra
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertCompra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Compra();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertCompra_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertCompra_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertCompra_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertCompra_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getPrecuenta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Precuenta',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Precuenta
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getPrecuenta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Precuenta();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getPrecuenta_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getPrecuenta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Precuenta',
      ),
    );

  /**
   * @var \Precuenta
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getPrecuenta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Precuenta();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getPrecuenta_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllPrecuenta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Precuenta',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Precuenta
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllPrecuenta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Precuenta();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllPrecuenta_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllPrecuenta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Precuenta',
        ),
      ),
    );

  /**
   * @var \Precuenta[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllPrecuenta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size140 = 0;
            $_etype143 = 0;
            $xfer += $input->readListBegin($_etype143, $_size140);
            for ($_i144 = 0; $_i144 < $_size140; ++$_i144)
            {
              $elem145 = null;
              $elem145 = new \Precuenta();
              $xfer += $elem145->read($input);
              $this->success []= $elem145;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllPrecuenta_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter146)
          {
            $xfer += $iter146->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoPrecuenta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Precuenta',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Precuenta
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoPrecuenta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Precuenta();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoPrecuenta_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoPrecuenta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoPrecuenta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoPrecuenta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updatePrecuenta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Precuenta',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Precuenta
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updatePrecuenta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Precuenta();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updatePrecuenta_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updatePrecuenta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updatePrecuenta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updatePrecuenta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertPrecuenta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Precuenta',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Precuenta
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertPrecuenta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Precuenta();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertPrecuenta_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertPrecuenta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertPrecuenta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertPrecuenta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deletePrecuenta_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Precuenta',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Precuenta
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deletePrecuenta_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Precuenta();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deletePrecuenta_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deletePrecuenta_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deletePrecuenta_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deletePrecuenta_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getReserva_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Reserva',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Reserva
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getReserva_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Reserva();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getReserva_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getReserva_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Reserva',
      ),
    );

  /**
   * @var \Reserva
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getReserva_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Reserva();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getReserva_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllReserva_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Reserva',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Reserva
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllReserva_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Reserva();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllReserva_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllReserva_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Reserva',
        ),
      ),
    );

  /**
   * @var \Reserva[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllReserva_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size147 = 0;
            $_etype150 = 0;
            $xfer += $input->readListBegin($_etype150, $_size147);
            for ($_i151 = 0; $_i151 < $_size147; ++$_i151)
            {
              $elem152 = null;
              $elem152 = new \Reserva();
              $xfer += $elem152->read($input);
              $this->success []= $elem152;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllReserva_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter153)
          {
            $xfer += $iter153->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoReserva_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Reserva',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Reserva
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoReserva_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Reserva();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoReserva_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoReserva_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoReserva_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoReserva_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateReserva_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Reserva',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Reserva
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateReserva_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Reserva();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateReserva_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateReserva_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateReserva_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateReserva_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertReserva_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Reserva',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Reserva
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertReserva_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Reserva();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertReserva_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertReserva_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertReserva_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertReserva_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteReserva_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Reserva',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Reserva
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteReserva_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Reserva();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteReserva_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deleteReserva_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deleteReserva_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deleteReserva_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getPedido_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Pedido',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Pedido
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getPedido_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Pedido();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getPedido_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getPedido_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Pedido',
      ),
    );

  /**
   * @var \Pedido
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getPedido_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Pedido();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getPedido_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllPedido_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Pedido',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Pedido
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllPedido_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Pedido();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllPedido_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllPedido_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Pedido',
        ),
      ),
    );

  /**
   * @var \Pedido[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllPedido_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size154 = 0;
            $_etype157 = 0;
            $xfer += $input->readListBegin($_etype157, $_size154);
            for ($_i158 = 0; $_i158 < $_size154; ++$_i158)
            {
              $elem159 = null;
              $elem159 = new \Pedido();
              $xfer += $elem159->read($input);
              $this->success []= $elem159;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllPedido_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter160)
          {
            $xfer += $iter160->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoPedido_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Pedido',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Pedido
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoPedido_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Pedido();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoPedido_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoPedido_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoPedido_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoPedido_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updatePedido_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Pedido',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Pedido
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updatePedido_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Pedido();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updatePedido_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updatePedido_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updatePedido_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updatePedido_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertPedido_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Pedido',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Pedido
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertPedido_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Pedido();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertPedido_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertPedido_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertPedido_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertPedido_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deletePedido_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Pedido',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \Pedido
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deletePedido_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \Pedido();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deletePedido_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deletePedido_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deletePedido_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deletePedido_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getPedidoIC_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\PedidoIC',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \PedidoIC
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getPedidoIC_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \PedidoIC();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getPedidoIC_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getPedidoIC_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\PedidoIC',
      ),
    );

  /**
   * @var \PedidoIC
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getPedidoIC_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \PedidoIC();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getPedidoIC_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllPedidoIC_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\PedidoIC',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \PedidoIC
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllPedidoIC_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \PedidoIC();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllPedidoIC_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_getAllPedidoIC_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\PedidoIC',
        ),
      ),
    );

  /**
   * @var \PedidoIC[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_getAllPedidoIC_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size161 = 0;
            $_etype164 = 0;
            $xfer += $input->readListBegin($_etype164, $_size161);
            for ($_i165 = 0; $_i165 < $_size161; ++$_i165)
            {
              $elem166 = null;
              $elem166 = new \PedidoIC();
              $xfer += $elem166->read($input);
              $this->success []= $elem166;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_getAllPedidoIC_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter167)
          {
            $xfer += $iter167->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoPedidoIC_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\PedidoIC',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \PedidoIC
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoPedidoIC_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \PedidoIC();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoPedidoIC_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updateEstadoPedidoIC_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updateEstadoPedidoIC_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updateEstadoPedidoIC_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updatePedidoIC_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\PedidoIC',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \PedidoIC
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updatePedidoIC_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \PedidoIC();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updatePedidoIC_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_updatePedidoIC_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_updatePedidoIC_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_updatePedidoIC_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertPedidoIC_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\PedidoIC',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \PedidoIC
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertPedidoIC_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \PedidoIC();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertPedidoIC_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_insertPedidoIC_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_insertPedidoIC_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_insertPedidoIC_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deletePedidoIC_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Busqueda',
      ),
    2 => array(
      'var' => 'objeto',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\PedidoIC',
      ),
    );

  /**
   * @var \Busqueda
   */
  public $busqueda = null;
  /**
   * @var \PedidoIC
   */
  public $objeto = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
      if (isset($vals['objeto'])) {
        $this->objeto = $vals['objeto'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deletePedidoIC_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->busqueda = new \Busqueda();
            $xfer += $this->busqueda->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->objeto = new \PedidoIC();
            $xfer += $this->objeto->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deletePedidoIC_args');
    if ($this->busqueda !== null) {
      if (!is_object($this->busqueda)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('busqueda', TType::STRUCT, 1);
      $xfer += $this->busqueda->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objeto !== null) {
      if (!is_object($this->objeto)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('objeto', TType::STRUCT, 2);
      $xfer += $this->objeto->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventario_deletePedidoIC_result {
  static $isValidate = false;

  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'Inventario_deletePedidoIC_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventario_deletePedidoIC_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


