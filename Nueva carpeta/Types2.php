<?php
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Item {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id_item',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'id_grupo',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'nombre_grupo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'precio_stock',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'precio',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'total',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'cantidad',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'medida',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'inventario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'estado_venta',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    15 => array(
      'var' => 'fecha_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    16 => array(
      'var' => 'usuario_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    17 => array(
      'var' => 'fecha_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    18 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $id_item = null;
  /**
   * @var int
   */
  public $id_grupo = null;
  /**
   * @var string
   */
  public $nombre_grupo = null;
  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $precio_stock = null;
  /**
   * @var string
   */
  public $precio = null;
  /**
   * @var string
   */
  public $total = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $cantidad = null;
  /**
   * @var string
   */
  public $medida = null;
  /**
   * @var string
   */
  public $inventario = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $estado_venta = null;
  /**
   * @var string
   */
  public $fecha_creacion = null;
  /**
   * @var string
   */
  public $usuario_creacion = null;
  /**
   * @var string
   */
  public $fecha_modificacion = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id_item'])) {
        $this->id_item = $vals['id_item'];
      }
      if (isset($vals['id_grupo'])) {
        $this->id_grupo = $vals['id_grupo'];
      }
      if (isset($vals['nombre_grupo'])) {
        $this->nombre_grupo = $vals['nombre_grupo'];
      }
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['precio_stock'])) {
        $this->precio_stock = $vals['precio_stock'];
      }
      if (isset($vals['precio'])) {
        $this->precio = $vals['precio'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['cantidad'])) {
        $this->cantidad = $vals['cantidad'];
      }
      if (isset($vals['medida'])) {
        $this->medida = $vals['medida'];
      }
      if (isset($vals['inventario'])) {
        $this->inventario = $vals['inventario'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['estado_venta'])) {
        $this->estado_venta = $vals['estado_venta'];
      }
      if (isset($vals['fecha_creacion'])) {
        $this->fecha_creacion = $vals['fecha_creacion'];
      }
      if (isset($vals['usuario_creacion'])) {
        $this->usuario_creacion = $vals['usuario_creacion'];
      }
      if (isset($vals['fecha_modificacion'])) {
        $this->fecha_modificacion = $vals['fecha_modificacion'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'Item';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_item);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_grupo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre_grupo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->precio_stock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->precio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cantidad);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->medida);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->inventario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado_venta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Item');
    if ($this->id_item !== null) {
      $xfer += $output->writeFieldBegin('id_item', TType::I32, 1);
      $xfer += $output->writeI32($this->id_item);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_grupo !== null) {
      $xfer += $output->writeFieldBegin('id_grupo', TType::I32, 2);
      $xfer += $output->writeI32($this->id_grupo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre_grupo !== null) {
      $xfer += $output->writeFieldBegin('nombre_grupo', TType::STRING, 3);
      $xfer += $output->writeString($this->nombre_grupo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 4);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 5);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->precio_stock !== null) {
      $xfer += $output->writeFieldBegin('precio_stock', TType::STRING, 6);
      $xfer += $output->writeString($this->precio_stock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->precio !== null) {
      $xfer += $output->writeFieldBegin('precio', TType::STRING, 7);
      $xfer += $output->writeString($this->precio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::STRING, 8);
      $xfer += $output->writeString($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 9);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cantidad !== null) {
      $xfer += $output->writeFieldBegin('cantidad', TType::STRING, 10);
      $xfer += $output->writeString($this->cantidad);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->medida !== null) {
      $xfer += $output->writeFieldBegin('medida', TType::STRING, 11);
      $xfer += $output->writeString($this->medida);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inventario !== null) {
      $xfer += $output->writeFieldBegin('inventario', TType::STRING, 12);
      $xfer += $output->writeString($this->inventario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 13);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado_venta !== null) {
      $xfer += $output->writeFieldBegin('estado_venta', TType::STRING, 14);
      $xfer += $output->writeString($this->estado_venta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_creacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_creacion', TType::STRING, 15);
      $xfer += $output->writeString($this->fecha_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_creacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_creacion', TType::STRING, 16);
      $xfer += $output->writeString($this->usuario_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_modificacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_modificacion', TType::STRING, 17);
      $xfer += $output->writeString($this->fecha_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 18);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Grupo {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id_grupo',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'fecha_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'usuario_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'fecha_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $id_grupo = null;
  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $fecha_creacion = null;
  /**
   * @var string
   */
  public $usuario_creacion = null;
  /**
   * @var string
   */
  public $fecha_modificacion = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id_grupo'])) {
        $this->id_grupo = $vals['id_grupo'];
      }
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['fecha_creacion'])) {
        $this->fecha_creacion = $vals['fecha_creacion'];
      }
      if (isset($vals['usuario_creacion'])) {
        $this->usuario_creacion = $vals['usuario_creacion'];
      }
      if (isset($vals['fecha_modificacion'])) {
        $this->fecha_modificacion = $vals['fecha_modificacion'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'Grupo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_grupo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Grupo');
    if ($this->id_grupo !== null) {
      $xfer += $output->writeFieldBegin('id_grupo', TType::I32, 1);
      $xfer += $output->writeI32($this->id_grupo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 2);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 3);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_creacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_creacion', TType::STRING, 4);
      $xfer += $output->writeString($this->fecha_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_creacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_creacion', TType::STRING, 5);
      $xfer += $output->writeString($this->usuario_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_modificacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_modificacion', TType::STRING, 6);
      $xfer += $output->writeString($this->fecha_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 7);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Compuesto {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id_compuesto',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'id_grupo',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'nombre_grupo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'items',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Item',
        ),
      ),
    5 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'precio',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'precio_stock',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'cantidad',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'inventario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'estado_venta',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'fecha_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    15 => array(
      'var' => 'usuario_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    16 => array(
      'var' => 'fecha_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    17 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $id_compuesto = null;
  /**
   * @var int
   */
  public $id_grupo = null;
  /**
   * @var string
   */
  public $nombre_grupo = null;
  /**
   * @var \Item[]
   */
  public $items = null;
  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $precio = null;
  /**
   * @var string
   */
  public $precio_stock = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $cantidad = null;
  /**
   * @var string
   */
  public $inventario = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $estado_venta = null;
  /**
   * @var string
   */
  public $fecha_creacion = null;
  /**
   * @var string
   */
  public $usuario_creacion = null;
  /**
   * @var string
   */
  public $fecha_modificacion = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id_compuesto'])) {
        $this->id_compuesto = $vals['id_compuesto'];
      }
      if (isset($vals['id_grupo'])) {
        $this->id_grupo = $vals['id_grupo'];
      }
      if (isset($vals['nombre_grupo'])) {
        $this->nombre_grupo = $vals['nombre_grupo'];
      }
      if (isset($vals['items'])) {
        $this->items = $vals['items'];
      }
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['precio'])) {
        $this->precio = $vals['precio'];
      }
      if (isset($vals['precio_stock'])) {
        $this->precio_stock = $vals['precio_stock'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['cantidad'])) {
        $this->cantidad = $vals['cantidad'];
      }
      if (isset($vals['inventario'])) {
        $this->inventario = $vals['inventario'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['estado_venta'])) {
        $this->estado_venta = $vals['estado_venta'];
      }
      if (isset($vals['fecha_creacion'])) {
        $this->fecha_creacion = $vals['fecha_creacion'];
      }
      if (isset($vals['usuario_creacion'])) {
        $this->usuario_creacion = $vals['usuario_creacion'];
      }
      if (isset($vals['fecha_modificacion'])) {
        $this->fecha_modificacion = $vals['fecha_modificacion'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'Compuesto';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_compuesto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_grupo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre_grupo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->items = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Item();
              $xfer += $elem5->read($input);
              $this->items []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->precio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->precio_stock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cantidad);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->inventario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado_venta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Compuesto');
    if ($this->id_compuesto !== null) {
      $xfer += $output->writeFieldBegin('id_compuesto', TType::I32, 1);
      $xfer += $output->writeI32($this->id_compuesto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_grupo !== null) {
      $xfer += $output->writeFieldBegin('id_grupo', TType::I32, 2);
      $xfer += $output->writeI32($this->id_grupo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre_grupo !== null) {
      $xfer += $output->writeFieldBegin('nombre_grupo', TType::STRING, 3);
      $xfer += $output->writeString($this->nombre_grupo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->items !== null) {
      if (!is_array($this->items)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items));
        {
          foreach ($this->items as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 5);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 6);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->precio !== null) {
      $xfer += $output->writeFieldBegin('precio', TType::STRING, 7);
      $xfer += $output->writeString($this->precio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->precio_stock !== null) {
      $xfer += $output->writeFieldBegin('precio_stock', TType::STRING, 8);
      $xfer += $output->writeString($this->precio_stock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 9);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cantidad !== null) {
      $xfer += $output->writeFieldBegin('cantidad', TType::STRING, 10);
      $xfer += $output->writeString($this->cantidad);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inventario !== null) {
      $xfer += $output->writeFieldBegin('inventario', TType::STRING, 11);
      $xfer += $output->writeString($this->inventario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 12);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado_venta !== null) {
      $xfer += $output->writeFieldBegin('estado_venta', TType::STRING, 13);
      $xfer += $output->writeString($this->estado_venta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_creacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_creacion', TType::STRING, 14);
      $xfer += $output->writeString($this->fecha_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_creacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_creacion', TType::STRING, 15);
      $xfer += $output->writeString($this->usuario_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_modificacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_modificacion', TType::STRING, 16);
      $xfer += $output->writeString($this->fecha_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 17);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CompuestoItem {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id_item_compuesto',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'id_compuesto',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'id_item',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'nombre_compuesto',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'nombre_item',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'cantidad',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'cantidad_stock',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'fecha_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'usuario_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'fecha_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $id_item_compuesto = null;
  /**
   * @var int
   */
  public $id_compuesto = null;
  /**
   * @var int
   */
  public $id_item = null;
  /**
   * @var string
   */
  public $nombre_compuesto = null;
  /**
   * @var string
   */
  public $nombre_item = null;
  /**
   * @var string
   */
  public $cantidad = null;
  /**
   * @var string
   */
  public $cantidad_stock = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $fecha_creacion = null;
  /**
   * @var string
   */
  public $usuario_creacion = null;
  /**
   * @var string
   */
  public $fecha_modificacion = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id_item_compuesto'])) {
        $this->id_item_compuesto = $vals['id_item_compuesto'];
      }
      if (isset($vals['id_compuesto'])) {
        $this->id_compuesto = $vals['id_compuesto'];
      }
      if (isset($vals['id_item'])) {
        $this->id_item = $vals['id_item'];
      }
      if (isset($vals['nombre_compuesto'])) {
        $this->nombre_compuesto = $vals['nombre_compuesto'];
      }
      if (isset($vals['nombre_item'])) {
        $this->nombre_item = $vals['nombre_item'];
      }
      if (isset($vals['cantidad'])) {
        $this->cantidad = $vals['cantidad'];
      }
      if (isset($vals['cantidad_stock'])) {
        $this->cantidad_stock = $vals['cantidad_stock'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['fecha_creacion'])) {
        $this->fecha_creacion = $vals['fecha_creacion'];
      }
      if (isset($vals['usuario_creacion'])) {
        $this->usuario_creacion = $vals['usuario_creacion'];
      }
      if (isset($vals['fecha_modificacion'])) {
        $this->fecha_modificacion = $vals['fecha_modificacion'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'CompuestoItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_item_compuesto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_compuesto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_item);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre_compuesto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre_item);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cantidad);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cantidad_stock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CompuestoItem');
    if ($this->id_item_compuesto !== null) {
      $xfer += $output->writeFieldBegin('id_item_compuesto', TType::I32, 1);
      $xfer += $output->writeI32($this->id_item_compuesto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_compuesto !== null) {
      $xfer += $output->writeFieldBegin('id_compuesto', TType::I32, 2);
      $xfer += $output->writeI32($this->id_compuesto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_item !== null) {
      $xfer += $output->writeFieldBegin('id_item', TType::I32, 3);
      $xfer += $output->writeI32($this->id_item);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre_compuesto !== null) {
      $xfer += $output->writeFieldBegin('nombre_compuesto', TType::STRING, 4);
      $xfer += $output->writeString($this->nombre_compuesto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre_item !== null) {
      $xfer += $output->writeFieldBegin('nombre_item', TType::STRING, 5);
      $xfer += $output->writeString($this->nombre_item);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cantidad !== null) {
      $xfer += $output->writeFieldBegin('cantidad', TType::STRING, 6);
      $xfer += $output->writeString($this->cantidad);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cantidad_stock !== null) {
      $xfer += $output->writeFieldBegin('cantidad_stock', TType::STRING, 7);
      $xfer += $output->writeString($this->cantidad_stock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 8);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_creacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_creacion', TType::STRING, 9);
      $xfer += $output->writeString($this->fecha_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_creacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_creacion', TType::STRING, 10);
      $xfer += $output->writeString($this->usuario_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_modificacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_modificacion', TType::STRING, 11);
      $xfer += $output->writeString($this->fecha_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 12);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Promocion {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id_promocion',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'id_item',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'id_compuesto',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'id_grupo',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'nombre_compuesto',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'nombre_item',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'nombre_grupo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'descuento',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'precio',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'precio_objeto',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'precio_final',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'fecha_inicio',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    15 => array(
      'var' => 'fecha_final',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    16 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    17 => array(
      'var' => 'fecha_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    18 => array(
      'var' => 'usuario_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    19 => array(
      'var' => 'fecha_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    20 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $id_promocion = null;
  /**
   * @var int
   */
  public $id_item = null;
  /**
   * @var int
   */
  public $id_compuesto = null;
  /**
   * @var int
   */
  public $id_grupo = null;
  /**
   * @var string
   */
  public $nombre_compuesto = null;
  /**
   * @var string
   */
  public $nombre_item = null;
  /**
   * @var string
   */
  public $nombre_grupo = null;
  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $descuento = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $precio = null;
  /**
   * @var string
   */
  public $precio_objeto = null;
  /**
   * @var string
   */
  public $precio_final = null;
  /**
   * @var string
   */
  public $fecha_inicio = null;
  /**
   * @var string
   */
  public $fecha_final = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $fecha_creacion = null;
  /**
   * @var string
   */
  public $usuario_creacion = null;
  /**
   * @var string
   */
  public $fecha_modificacion = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id_promocion'])) {
        $this->id_promocion = $vals['id_promocion'];
      }
      if (isset($vals['id_item'])) {
        $this->id_item = $vals['id_item'];
      }
      if (isset($vals['id_compuesto'])) {
        $this->id_compuesto = $vals['id_compuesto'];
      }
      if (isset($vals['id_grupo'])) {
        $this->id_grupo = $vals['id_grupo'];
      }
      if (isset($vals['nombre_compuesto'])) {
        $this->nombre_compuesto = $vals['nombre_compuesto'];
      }
      if (isset($vals['nombre_item'])) {
        $this->nombre_item = $vals['nombre_item'];
      }
      if (isset($vals['nombre_grupo'])) {
        $this->nombre_grupo = $vals['nombre_grupo'];
      }
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['descuento'])) {
        $this->descuento = $vals['descuento'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['precio'])) {
        $this->precio = $vals['precio'];
      }
      if (isset($vals['precio_objeto'])) {
        $this->precio_objeto = $vals['precio_objeto'];
      }
      if (isset($vals['precio_final'])) {
        $this->precio_final = $vals['precio_final'];
      }
      if (isset($vals['fecha_inicio'])) {
        $this->fecha_inicio = $vals['fecha_inicio'];
      }
      if (isset($vals['fecha_final'])) {
        $this->fecha_final = $vals['fecha_final'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['fecha_creacion'])) {
        $this->fecha_creacion = $vals['fecha_creacion'];
      }
      if (isset($vals['usuario_creacion'])) {
        $this->usuario_creacion = $vals['usuario_creacion'];
      }
      if (isset($vals['fecha_modificacion'])) {
        $this->fecha_modificacion = $vals['fecha_modificacion'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'Promocion';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_promocion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_item);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_compuesto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_grupo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre_compuesto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre_item);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre_grupo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descuento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->precio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->precio_objeto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->precio_final);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_inicio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_final);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Promocion');
    if ($this->id_promocion !== null) {
      $xfer += $output->writeFieldBegin('id_promocion', TType::I32, 1);
      $xfer += $output->writeI32($this->id_promocion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_item !== null) {
      $xfer += $output->writeFieldBegin('id_item', TType::I32, 2);
      $xfer += $output->writeI32($this->id_item);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_compuesto !== null) {
      $xfer += $output->writeFieldBegin('id_compuesto', TType::I32, 3);
      $xfer += $output->writeI32($this->id_compuesto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_grupo !== null) {
      $xfer += $output->writeFieldBegin('id_grupo', TType::I32, 4);
      $xfer += $output->writeI32($this->id_grupo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre_compuesto !== null) {
      $xfer += $output->writeFieldBegin('nombre_compuesto', TType::STRING, 5);
      $xfer += $output->writeString($this->nombre_compuesto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre_item !== null) {
      $xfer += $output->writeFieldBegin('nombre_item', TType::STRING, 6);
      $xfer += $output->writeString($this->nombre_item);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre_grupo !== null) {
      $xfer += $output->writeFieldBegin('nombre_grupo', TType::STRING, 7);
      $xfer += $output->writeString($this->nombre_grupo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 8);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descuento !== null) {
      $xfer += $output->writeFieldBegin('descuento', TType::STRING, 9);
      $xfer += $output->writeString($this->descuento);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 10);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->precio !== null) {
      $xfer += $output->writeFieldBegin('precio', TType::STRING, 11);
      $xfer += $output->writeString($this->precio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->precio_objeto !== null) {
      $xfer += $output->writeFieldBegin('precio_objeto', TType::STRING, 12);
      $xfer += $output->writeString($this->precio_objeto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->precio_final !== null) {
      $xfer += $output->writeFieldBegin('precio_final', TType::STRING, 13);
      $xfer += $output->writeString($this->precio_final);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_inicio !== null) {
      $xfer += $output->writeFieldBegin('fecha_inicio', TType::STRING, 14);
      $xfer += $output->writeString($this->fecha_inicio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_final !== null) {
      $xfer += $output->writeFieldBegin('fecha_final', TType::STRING, 15);
      $xfer += $output->writeString($this->fecha_final);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 16);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_creacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_creacion', TType::STRING, 17);
      $xfer += $output->writeString($this->fecha_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_creacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_creacion', TType::STRING, 18);
      $xfer += $output->writeString($this->usuario_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_modificacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_modificacion', TType::STRING, 19);
      $xfer += $output->writeString($this->fecha_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 20);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Ingreso {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id_ingreso',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'id_item',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'id_compuesto',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'nombre_compuesto',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'nombre_item',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'cantidad',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'fecha_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'usuario_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'fecha_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $id_ingreso = null;
  /**
   * @var int
   */
  public $id_item = null;
  /**
   * @var int
   */
  public $id_compuesto = null;
  /**
   * @var string
   */
  public $nombre_compuesto = null;
  /**
   * @var string
   */
  public $nombre_item = null;
  /**
   * @var string
   */
  public $cantidad = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $fecha_creacion = null;
  /**
   * @var string
   */
  public $usuario_creacion = null;
  /**
   * @var string
   */
  public $fecha_modificacion = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id_ingreso'])) {
        $this->id_ingreso = $vals['id_ingreso'];
      }
      if (isset($vals['id_item'])) {
        $this->id_item = $vals['id_item'];
      }
      if (isset($vals['id_compuesto'])) {
        $this->id_compuesto = $vals['id_compuesto'];
      }
      if (isset($vals['nombre_compuesto'])) {
        $this->nombre_compuesto = $vals['nombre_compuesto'];
      }
      if (isset($vals['nombre_item'])) {
        $this->nombre_item = $vals['nombre_item'];
      }
      if (isset($vals['cantidad'])) {
        $this->cantidad = $vals['cantidad'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['fecha_creacion'])) {
        $this->fecha_creacion = $vals['fecha_creacion'];
      }
      if (isset($vals['usuario_creacion'])) {
        $this->usuario_creacion = $vals['usuario_creacion'];
      }
      if (isset($vals['fecha_modificacion'])) {
        $this->fecha_modificacion = $vals['fecha_modificacion'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'Ingreso';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_ingreso);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_item);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_compuesto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre_compuesto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre_item);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cantidad);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Ingreso');
    if ($this->id_ingreso !== null) {
      $xfer += $output->writeFieldBegin('id_ingreso', TType::I32, 1);
      $xfer += $output->writeI32($this->id_ingreso);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_item !== null) {
      $xfer += $output->writeFieldBegin('id_item', TType::I32, 2);
      $xfer += $output->writeI32($this->id_item);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_compuesto !== null) {
      $xfer += $output->writeFieldBegin('id_compuesto', TType::I32, 3);
      $xfer += $output->writeI32($this->id_compuesto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre_compuesto !== null) {
      $xfer += $output->writeFieldBegin('nombre_compuesto', TType::STRING, 4);
      $xfer += $output->writeString($this->nombre_compuesto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre_item !== null) {
      $xfer += $output->writeFieldBegin('nombre_item', TType::STRING, 5);
      $xfer += $output->writeString($this->nombre_item);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cantidad !== null) {
      $xfer += $output->writeFieldBegin('cantidad', TType::STRING, 6);
      $xfer += $output->writeString($this->cantidad);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 7);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 8);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 9);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_creacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_creacion', TType::STRING, 10);
      $xfer += $output->writeString($this->fecha_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_creacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_creacion', TType::STRING, 11);
      $xfer += $output->writeString($this->usuario_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_modificacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_modificacion', TType::STRING, 12);
      $xfer += $output->writeString($this->fecha_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 13);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrdenCompra {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id_orden_compra',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'id_proveedor',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'nombre_proveedor',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'ruc_proveedor',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'precio_compra',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'factura',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'item',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\OrdenCompraItem',
        ),
      ),
    11 => array(
      'var' => 'fecha_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'usuario_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    13 => array(
      'var' => 'fecha_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    14 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $id_orden_compra = null;
  /**
   * @var int
   */
  public $id_proveedor = null;
  /**
   * @var string
   */
  public $nombre_proveedor = null;
  /**
   * @var string
   */
  public $ruc_proveedor = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $precio_compra = null;
  /**
   * @var string
   */
  public $factura = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var \OrdenCompraItem[]
   */
  public $item = null;
  /**
   * @var string
   */
  public $fecha_creacion = null;
  /**
   * @var string
   */
  public $usuario_creacion = null;
  /**
   * @var string
   */
  public $fecha_modificacion = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id_orden_compra'])) {
        $this->id_orden_compra = $vals['id_orden_compra'];
      }
      if (isset($vals['id_proveedor'])) {
        $this->id_proveedor = $vals['id_proveedor'];
      }
      if (isset($vals['nombre_proveedor'])) {
        $this->nombre_proveedor = $vals['nombre_proveedor'];
      }
      if (isset($vals['ruc_proveedor'])) {
        $this->ruc_proveedor = $vals['ruc_proveedor'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['precio_compra'])) {
        $this->precio_compra = $vals['precio_compra'];
      }
      if (isset($vals['factura'])) {
        $this->factura = $vals['factura'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['item'])) {
        $this->item = $vals['item'];
      }
      if (isset($vals['fecha_creacion'])) {
        $this->fecha_creacion = $vals['fecha_creacion'];
      }
      if (isset($vals['usuario_creacion'])) {
        $this->usuario_creacion = $vals['usuario_creacion'];
      }
      if (isset($vals['fecha_modificacion'])) {
        $this->fecha_modificacion = $vals['fecha_modificacion'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'OrdenCompra';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_orden_compra);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_proveedor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre_proveedor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ruc_proveedor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->precio_compra);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->factura);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->item = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \OrdenCompraItem();
              $xfer += $elem12->read($input);
              $this->item []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrdenCompra');
    if ($this->id_orden_compra !== null) {
      $xfer += $output->writeFieldBegin('id_orden_compra', TType::I32, 1);
      $xfer += $output->writeI32($this->id_orden_compra);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_proveedor !== null) {
      $xfer += $output->writeFieldBegin('id_proveedor', TType::I32, 2);
      $xfer += $output->writeI32($this->id_proveedor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre_proveedor !== null) {
      $xfer += $output->writeFieldBegin('nombre_proveedor', TType::STRING, 3);
      $xfer += $output->writeString($this->nombre_proveedor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ruc_proveedor !== null) {
      $xfer += $output->writeFieldBegin('ruc_proveedor', TType::STRING, 4);
      $xfer += $output->writeString($this->ruc_proveedor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 5);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->precio_compra !== null) {
      $xfer += $output->writeFieldBegin('precio_compra', TType::STRING, 6);
      $xfer += $output->writeString($this->precio_compra);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->factura !== null) {
      $xfer += $output->writeFieldBegin('factura', TType::STRING, 7);
      $xfer += $output->writeString($this->factura);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 8);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 9);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item !== null) {
      if (!is_array($this->item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('item', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->item));
        {
          foreach ($this->item as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_creacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_creacion', TType::STRING, 11);
      $xfer += $output->writeString($this->fecha_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_creacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_creacion', TType::STRING, 12);
      $xfer += $output->writeString($this->usuario_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_modificacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_modificacion', TType::STRING, 13);
      $xfer += $output->writeString($this->fecha_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 14);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrdenCompraItem {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id_orden_compra_item',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'id_item',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'id_orden_compra',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'nombre_item',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'precio',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'cantidad',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'fecha_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'usuario_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'fecha_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    12 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $id_orden_compra_item = null;
  /**
   * @var int
   */
  public $id_item = null;
  /**
   * @var int
   */
  public $id_orden_compra = null;
  /**
   * @var string
   */
  public $nombre_item = null;
  /**
   * @var string
   */
  public $precio = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $cantidad = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $fecha_creacion = null;
  /**
   * @var string
   */
  public $usuario_creacion = null;
  /**
   * @var string
   */
  public $fecha_modificacion = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id_orden_compra_item'])) {
        $this->id_orden_compra_item = $vals['id_orden_compra_item'];
      }
      if (isset($vals['id_item'])) {
        $this->id_item = $vals['id_item'];
      }
      if (isset($vals['id_orden_compra'])) {
        $this->id_orden_compra = $vals['id_orden_compra'];
      }
      if (isset($vals['nombre_item'])) {
        $this->nombre_item = $vals['nombre_item'];
      }
      if (isset($vals['precio'])) {
        $this->precio = $vals['precio'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['cantidad'])) {
        $this->cantidad = $vals['cantidad'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['fecha_creacion'])) {
        $this->fecha_creacion = $vals['fecha_creacion'];
      }
      if (isset($vals['usuario_creacion'])) {
        $this->usuario_creacion = $vals['usuario_creacion'];
      }
      if (isset($vals['fecha_modificacion'])) {
        $this->fecha_modificacion = $vals['fecha_modificacion'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'OrdenCompraItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_orden_compra_item);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_item);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_orden_compra);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre_item);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->precio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cantidad);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrdenCompraItem');
    if ($this->id_orden_compra_item !== null) {
      $xfer += $output->writeFieldBegin('id_orden_compra_item', TType::I32, 1);
      $xfer += $output->writeI32($this->id_orden_compra_item);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_item !== null) {
      $xfer += $output->writeFieldBegin('id_item', TType::I32, 2);
      $xfer += $output->writeI32($this->id_item);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id_orden_compra !== null) {
      $xfer += $output->writeFieldBegin('id_orden_compra', TType::I32, 3);
      $xfer += $output->writeI32($this->id_orden_compra);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre_item !== null) {
      $xfer += $output->writeFieldBegin('nombre_item', TType::STRING, 4);
      $xfer += $output->writeString($this->nombre_item);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->precio !== null) {
      $xfer += $output->writeFieldBegin('precio', TType::STRING, 5);
      $xfer += $output->writeString($this->precio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 6);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cantidad !== null) {
      $xfer += $output->writeFieldBegin('cantidad', TType::STRING, 7);
      $xfer += $output->writeString($this->cantidad);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 8);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_creacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_creacion', TType::STRING, 9);
      $xfer += $output->writeString($this->fecha_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_creacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_creacion', TType::STRING, 10);
      $xfer += $output->writeString($this->usuario_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_modificacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_modificacion', TType::STRING, 11);
      $xfer += $output->writeString($this->fecha_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 12);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Proveedor {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id_proveedor',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'nombre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'ruc',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'direccion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'correo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'descripcion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'estado',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'fecha_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    9 => array(
      'var' => 'usuario_creacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    10 => array(
      'var' => 'fecha_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    11 => array(
      'var' => 'usuario_modificacion',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $id_proveedor = null;
  /**
   * @var string
   */
  public $nombre = null;
  /**
   * @var string
   */
  public $ruc = null;
  /**
   * @var string
   */
  public $direccion = null;
  /**
   * @var string
   */
  public $correo = null;
  /**
   * @var string
   */
  public $descripcion = null;
  /**
   * @var string
   */
  public $estado = null;
  /**
   * @var string
   */
  public $fecha_creacion = null;
  /**
   * @var string
   */
  public $usuario_creacion = null;
  /**
   * @var string
   */
  public $fecha_modificacion = null;
  /**
   * @var string
   */
  public $usuario_modificacion = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id_proveedor'])) {
        $this->id_proveedor = $vals['id_proveedor'];
      }
      if (isset($vals['nombre'])) {
        $this->nombre = $vals['nombre'];
      }
      if (isset($vals['ruc'])) {
        $this->ruc = $vals['ruc'];
      }
      if (isset($vals['direccion'])) {
        $this->direccion = $vals['direccion'];
      }
      if (isset($vals['correo'])) {
        $this->correo = $vals['correo'];
      }
      if (isset($vals['descripcion'])) {
        $this->descripcion = $vals['descripcion'];
      }
      if (isset($vals['estado'])) {
        $this->estado = $vals['estado'];
      }
      if (isset($vals['fecha_creacion'])) {
        $this->fecha_creacion = $vals['fecha_creacion'];
      }
      if (isset($vals['usuario_creacion'])) {
        $this->usuario_creacion = $vals['usuario_creacion'];
      }
      if (isset($vals['fecha_modificacion'])) {
        $this->fecha_modificacion = $vals['fecha_modificacion'];
      }
      if (isset($vals['usuario_modificacion'])) {
        $this->usuario_modificacion = $vals['usuario_modificacion'];
      }
    }
  }

  public function getName() {
    return 'Proveedor';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id_proveedor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nombre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ruc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->direccion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->correo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descripcion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->estado);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_creacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario_modificacion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Proveedor');
    if ($this->id_proveedor !== null) {
      $xfer += $output->writeFieldBegin('id_proveedor', TType::I32, 1);
      $xfer += $output->writeI32($this->id_proveedor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nombre !== null) {
      $xfer += $output->writeFieldBegin('nombre', TType::STRING, 2);
      $xfer += $output->writeString($this->nombre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ruc !== null) {
      $xfer += $output->writeFieldBegin('ruc', TType::STRING, 3);
      $xfer += $output->writeString($this->ruc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direccion !== null) {
      $xfer += $output->writeFieldBegin('direccion', TType::STRING, 4);
      $xfer += $output->writeString($this->direccion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->correo !== null) {
      $xfer += $output->writeFieldBegin('correo', TType::STRING, 5);
      $xfer += $output->writeString($this->correo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descripcion !== null) {
      $xfer += $output->writeFieldBegin('descripcion', TType::STRING, 6);
      $xfer += $output->writeString($this->descripcion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->estado !== null) {
      $xfer += $output->writeFieldBegin('estado', TType::STRING, 7);
      $xfer += $output->writeString($this->estado);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_creacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_creacion', TType::STRING, 8);
      $xfer += $output->writeString($this->fecha_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_creacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_creacion', TType::STRING, 9);
      $xfer += $output->writeString($this->usuario_creacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_modificacion !== null) {
      $xfer += $output->writeFieldBegin('fecha_modificacion', TType::STRING, 10);
      $xfer += $output->writeString($this->fecha_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario_modificacion !== null) {
      $xfer += $output->writeFieldBegin('usuario_modificacion', TType::STRING, 11);
      $xfer += $output->writeString($this->usuario_modificacion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Busqueda {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'canal',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'usuario',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'tiempo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'filtros',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Filtros',
        ),
      ),
    7 => array(
      'var' => 'fecha_inicio',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    8 => array(
      'var' => 'fecha_termino',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $canal = null;
  /**
   * @var string
   */
  public $usuario = null;
  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $tiempo = null;
  /**
   * @var \Filtros[]
   */
  public $filtros = null;
  /**
   * @var string
   */
  public $fecha_inicio = null;
  /**
   * @var string
   */
  public $fecha_termino = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['canal'])) {
        $this->canal = $vals['canal'];
      }
      if (isset($vals['usuario'])) {
        $this->usuario = $vals['usuario'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['tiempo'])) {
        $this->tiempo = $vals['tiempo'];
      }
      if (isset($vals['filtros'])) {
        $this->filtros = $vals['filtros'];
      }
      if (isset($vals['fecha_inicio'])) {
        $this->fecha_inicio = $vals['fecha_inicio'];
      }
      if (isset($vals['fecha_termino'])) {
        $this->fecha_termino = $vals['fecha_termino'];
      }
    }
  }

  public function getName() {
    return 'Busqueda';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->canal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->usuario);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tiempo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->filtros = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \Filtros();
              $xfer += $elem19->read($input);
              $this->filtros []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_inicio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fecha_termino);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Busqueda');
    if ($this->canal !== null) {
      $xfer += $output->writeFieldBegin('canal', TType::STRING, 1);
      $xfer += $output->writeString($this->canal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usuario !== null) {
      $xfer += $output->writeFieldBegin('usuario', TType::STRING, 2);
      $xfer += $output->writeString($this->usuario);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 3);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 4);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tiempo !== null) {
      $xfer += $output->writeFieldBegin('tiempo', TType::STRING, 5);
      $xfer += $output->writeString($this->tiempo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filtros !== null) {
      if (!is_array($this->filtros)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filtros', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->filtros));
        {
          foreach ($this->filtros as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_inicio !== null) {
      $xfer += $output->writeFieldBegin('fecha_inicio', TType::STRING, 7);
      $xfer += $output->writeString($this->fecha_inicio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fecha_termino !== null) {
      $xfer += $output->writeFieldBegin('fecha_termino', TType::STRING, 8);
      $xfer += $output->writeString($this->fecha_termino);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Filtros {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'tipo',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'busqueda',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $tipo = null;
  /**
   * @var string
   */
  public $busqueda = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['tipo'])) {
        $this->tipo = $vals['tipo'];
      }
      if (isset($vals['busqueda'])) {
        $this->busqueda = $vals['busqueda'];
      }
    }
  }

  public function getName() {
    return 'Filtros';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->busqueda);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Filtros');
    if ($this->tipo !== null) {
      $xfer += $output->writeFieldBegin('tipo', TType::STRING, 1);
      $xfer += $output->writeString($this->tipo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->busqueda !== null) {
      $xfer += $output->writeFieldBegin('busqueda', TType::STRING, 2);
      $xfer += $output->writeString($this->busqueda);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


